; This is one of the most powerful scripts in the game. It's the bridge
; between MIDI pitches and running script. Anything you can do in DTA, you
; can give a pitch and call when the game's running and a song is playing.
; 
; You can also set new animation events in here, for giving the guitarist
; far more intricate animation capabilities. We've specified some new
; StrumMaps and HandMaps for open strums and for letting the bassist use a
; pick, among other things.
#define GUITARSTRUMMAPPINGS
((idle_event strum_open)
   (idle_length 3.52)
   (idle_start_gap 1.5)
   (idle_end_gap 0.24)
   (max_gap 0.24)
   (zero_length 1)
   (mappings
      (StrumMap_Default
         (events
            (default
               {if_else {> $mp.length 0.25}
                  (strum_short_01 strum_short_02 strum_short_03 strum_short_04)
                  (strum_pick_01 strum_pick_02)})
            (()
               {if_else {> $mp.length 0.3}
                  (strum_long_01 strum_long_02 strum_long_03 strum_long_04)
                  (strum_short_01 strum_short_02 strum_short_03 strum_short_04)})))
      (StrumMap_punk
         (events
            (default
               {if_else {> $mp.length 0.3}
                  strum_short_04
                  strum_short_01})
            (()
               {if_else {> $mp.length 0.3}
                  (strum_long_01 strum_long_02 strum_long_03 strum_long_04)
                  strum_short_01})))
      (StrumMap_Open
         (events
            (default
               {if_else {> $mp.length 0.25}
                  (strum_open)
                  (strum_open)})
            (()
               {if_else {> $mp.length 0.3}
                  (strum_open)
                  (strum_open)})))
      (StrumMap_softpick
         (events
            (default strum_short_04)
            (()
               strum_short_04)))))
#define GUITARFRETMAPPINGS
((idle_event finger_open)
   (idle_length 0.52)
   (idle_start_gap 0.24)
   (idle_end_gap 0.24)
   (min_gap 0.12)
   (max_gap 0.24)
   (mappings
      (HandMap_Default
         (events
            (1
               {if_else {> $mp.length 0.3}
                  finger_vibrato_index
                  finger_hold_index})
            (2
               {if_else {> $mp.length 0.3}
                  finger_vibrato_middle
                  finger_hold_pinky})
            (3
               {if_else {> $mp.length 0.3}
                  finger_vibrato_ring
                  finger_hold_index_hi})
            (4
               {if_else {> $mp.length 0.3}
                  finger_vibrato_pinky
                  finger_hold_ring_hi})
            (5
               {if_else {> $mp.length 0.3}
                  (finger_vibrato_index finger_vibrato_ring)
                  finger_hold_middle_hi})
            ((1) finger_powerchord_1)
            ((2) finger_powerchord_1)
            (() finger_powerchord_2)))
       (HandMap_Linear
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_middle})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_ring})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_pinky})
             (5
                {if_else {> $mp.length 0.3}
                   (finger_vibrato_index finger_vibrato_ring)
                   (finger_hold_index finger_hold_middle finger_hold_ring)})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_NoChords
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_middle})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_ring})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_pinky})
             (5
                {if_else {> $mp.length 0.3}
                   (finger_vibrato_index finger_vibrato_ring)
                   (finger_hold_index finger_hold_middle finger_hold_ring)})
             ((1) finger_hold_index)
             ((2) finger_hold_middle)
             ((3) finger_hold_ring)
             ((4) finger_hold_pinky)))
       (HandMap_AllChords
          (events
             (1 finger_powerchord_1)
             (2 finger_powerchord_1)
             (3 finger_powerchord_1)
             (4 finger_powerchord_2)
             (5 finger_powerchord_2)
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Chord_D
          (events
             (1 finger_chord_dmajor)
             (2 finger_chord_dmajor)
             (3 finger_chord_dmajor)
             (4 finger_chord_dmajor)
             (5 finger_chord_dmajor)
             ((1) finger_chord_dmajor)
             ((2) finger_chord_dmajor)
             (() finger_chord_dmajor)))
       (HandMap_DropD
          (events
             (1 finger_open)
             (2 finger_powerchord_1)
             (3 finger_powerchord_1)
             (4 finger_powerchord_2)
             (5 finger_powerchord_2)
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_DropD2
          (events
             (1 finger_open)
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_index_hi})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_middle_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_ring_hi})
             (5
                {if_else {> $mp.length 0.3}
                   (finger_vibrato_index finger_vibrato_ring)
                   finger_hold_pinky})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
           (HandMap_Open
              (events
                 (1 finger_open)
                 (2 finger_open)
                 (3 finger_open)
                 (4 finger_open)
                 (5 finger_open)
                 ((1) finger_powerchord_1)
                 ((2) finger_powerchord_1)
                 (() finger_powerchord_2)))
       (HandMap_Index
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Middle
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_middle})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_middle})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_middle})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_middle})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_middle})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Ring
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_ring})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_ring})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_ring})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_ring})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_ring})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Pinky
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_pinky})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_pinky})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_pinky})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_pinky})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_pinky})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Index_Hi
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Middle_Hi
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle_hi
                   finger_hold_middle_hi})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle_hi
                   finger_hold_middle_hi})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle_hi
                   finger_hold_middle_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle_hi
                   finger_hold_middle_hi})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle_hi
                   finger_hold_middle_hi})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Ring_Hi
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring_hi
                   finger_hold_ring_hi})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring_hi
                   finger_hold_ring_hi})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring_hi
                   finger_hold_ring_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring_hi
                   finger_hold_ring_hi})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring_hi
                   finger_hold_ring_hi})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Pinky_Hi
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Octave
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Octave2
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_hold_index_hi})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             (5
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_hold_pinky_hi})
             ((1) finger_powerchord_1)
             ((2) finger_powerchord_1)
             (() finger_powerchord_2)))
       (HandMap_Solo
          (events
             (1
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_hold_index})
             (2
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_hold_pinky})
             (3
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_hold_index_hi})
             (4
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_hold_ring_hi})
             (5
                {if_else {> $mp.length 0.3}
                   (finger_vibrato_index finger_vibrato_ring)
                   finger_hold_middle_hi})
             ((1 2)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index
                   finger_chord_dmajor})
             ((1 3)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle
                   finger_chord_dmajor})
             ((1 4)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_chord_dmajor})
             ((1 5)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring
                   finger_chord_dmajor})
             ((2 3)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky
                   finger_chord_dmajor})
             ((2 4)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_index_hi
                   finger_chord_dmajor})
             ((2 5)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_middle_hi
                   finger_chord_dmajor})
             ((3 4)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring_hi
                   finger_chord_dmajor})
             ((3 5)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_pinky_hi
                   finger_chord_dmajor})
             ((4 5)
                {if_else {> $mp.length 0.3}
                   finger_vibrato_ring_hi
                   finger_chord_dmajor})))))
(player0_fret
   (type gem)
   (inverted TRUE)
   (enter_events
      (set_inactive_clip finger_open)
      (play finger_open))
   (track_name
      {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS1'
            {switch {game get_track_sym 0}
               (bass 'PART BASS')
               (drum 'PART GUITAR')
               (guitar 'PART GUITAR COOP')
               (rhythm 'PART RHYTHM')}}
         ''}
      {switch {game get_track_sym 0}
         (bass 'PART BASS')
         (drum 'PART GUITAR')
         (guitar 'PART GUITAR')
         (lead 'PART GUITAR')
         (rhythm 'PART RHYTHM')})
      GUITARFRETMAPPINGS)
(player1_fret
   (type gem)
   (inverted TRUE)
   (enter_events
      (set_inactive_clip finger_open)
      (play finger_open))
   (track_name
      {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS2'
            {switch {game get_track_sym 1}
               (bass 'PART BASS')
               (drum 'PART GUITAR')
               (guitar 'PART GUITAR COOP')
               (rhythm 'PART RHYTHM')}}
         ''}
      'PART GUITAR')
   GUITARFRETMAPPINGS)
(player0_strum
   (type gem)
   (inverted TRUE)
   (enter_events
      (set_inactive_clip strum_open)
      (play strum_open))
   (track_name
      {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS1'
            {switch
               {game get_track_sym 0}
               (bass '')
               (drum 'PART GUITAR')
               (guitar 'PART GUITAR COOP')
               (rhythm 'PART RHYTHM')}}
         ''}
      {switch {game get_track_sym 0}
         (bass 'PART BASS')
         (guitar 'PART GUITAR')
         (drum 'PART GUITAR')
         (lead 'PART GUITAR')
         (rhythm 'PART RHYTHM')})
   GUITARSTRUMMAPPINGS)
(player1_strum
   (type gem)
   (inverted TRUE)
   (enter_events
      (set_inactive_clip strum_open)
      (play strum_open))
   (track_name
      {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS2'
            {switch {game get_track_sym 1}
               (bass '')
               (drum 'PART GUITAR')
               (guitar 'PART GUITAR COOP')
               (rhythm 'PART RHYTHM')}}
         ''}
      'PART GUITAR')
   GUITARSTRUMMAPPINGS)
(bass_strum
   (type gem)
   (inverted TRUE)
   (enter_events
      (set_inactive_clip bass_pluck_open)
      (play bass_pluck_open))
   (track_name 'PART BASS')
   (idle_event bass_pluck_open)
   (idle_length 3.52)
   (idle_start_gap 0.4)
   (idle_end_gap 0.4)
   (zero_length 1)
   (max_gap 0.24)
   (mappings
      (StrumMap_Default
         (idle_event bass_pluck_open)
         (events
            (default kBassPluck)
            (()
               kBassPluck)))
      (StrumMap_Open
         (idle_event bass_pluck_open)
         (events
            (default bass_pluck_open)
            (()
               bass_pluck_open)))
      (StrumMap_SlapBass
         (idle_event bass_slap_open)
         (events
            (default kBassSlap)
            (()
               kBassSlap)))
      (StrumMap_SlapBassOpen
         (idle_event bass_slap_open)
         (events
            (default bass_slap_open)
            (()
               bass_slap_open)))
      (StrumMap_Pick
         (idle_event strum_open)
         (events
            (default
               {if_else {> $mp.length 0.25}
                  (strum_short_01 strum_short_02 strum_short_03 strum_short_04)
                  (strum_pick_01 strum_pick_02)})
            (()
               {if_else {> $mp.length 0.3}
                  (strum_long_01 strum_long_02 strum_long_03 strum_long_04)
                  (strum_short_01 strum_short_02 strum_short_03 strum_short_04)})))
      (StrumMap_PickOpen
         (idle_event strum_open)
            (events
               (default
                  {if_else {> $mp.length 0.25}
                     (strum_open)
                     (strum_open)})
               (()
                  {if_else {> $mp.length 0.3}
                     (strum_open)
                     (strum_open)})))))
(player0_solo
   (type midi)
   (eval TRUE)
   (track_name
    {if_else {game multiplayer}
       {if_else {game multiplayer_vs}
          'PART GUITAR VS1'
          {switch {game get_track_sym 0}
             (bass 'PART BASS')
             (drum 'PART GUITAR')
             (rhythm 'PART RHYTHM')
             (guitar 'PART GUITAR COOP')}}
          ''}
       {switch
          {game get_track_sym 0}
          (bass 'PART BASS')
          (guitar 'PART GUITAR')
          (drum 'PART GUITAR')
          (lead 'PART GUITAR')
          (rhythm 'PART RHYTHM')})
   (mappings
      (default
         (events
            (115 (
                  {do
                     {set $p0_solo {! $p0_solo}}
                        {if_else $p0_solo
                           {do
                              {if_else $p0_evensolo
                                 {switch $player ;streak is even, write to line 2 while 1 is showing then swap
                                    (0
                                       {solo_overlay_panel_buffer set_solo_line "100%"}
                                       {solo_overlay_panel set_showing FALSE}
                                       {solo_overlay_panel_buffer set_showing TRUE}
                                       {set $p0_evensolo FALSE}
                                    )
                                    kDataUnhandled
                                 }
                                 {switch $player ;streak is odd, write to line 1 while 2 is showing then swap
                                    (0 
                                       {solo_overlay_panel set_solo_line "100%"}
                                       {solo_overlay_panel_buffer set_showing FALSE}
                                       {solo_overlay_panel set_showing TRUE}
                                       {set $p0_evensolo TRUE}
                                    )
                                    kDataUnhandled
                                 }
                              }
                              {{XBOX_TRACK_PANEL find rail_light.lit} set color {pack_color 0.0 1.0 0.80}} ;rail color
                              {{XBOX_TRACK_PANEL find track1.lit} set color {pack_color 0.0 1.0 0.80}} ;rail color
                              {{XBOX_TRACK_PANEL find track2.lit} set color {pack_color 0.0 1.0 0.80}} ;rail color
                           }
                           {do
                              CALC_BONUS
                                 {thread_task
                                    (delay 2)
                                    (units kTaskSeconds)
                                    (script
                                       {if_else $p0_evensolo
                                          {switch $player ;streak is even, write to line 2 while 1 is showing then swap
                                             (0
                                                {solo_overlay_panel_buffer set_solo_line {localize $solo_award}}
                                                {set $solo_award_points 0}
                                                {solo_overlay_panel set_showing FALSE}
                                                {solo_overlay_panel_buffer set_showing TRUE}
                                                {solo_overlay_panel_buffer bounce}
                                                {solo_overlay_panel bounce}
                                                {set $p0_evensolo FALSE}
                                             )
                                             kDataUnhandled
                                          }
                                          {switch $player ;streak is odd, write to line 1 while 2 is showing then swap
                                             (0 
                                                {solo_overlay_panel set_solo_line {localize $solo_award}}
                                                {set $solo_award_points 0}
                                                {solo_overlay_panel_buffer set_showing FALSE}
                                                {solo_overlay_panel set_showing TRUE}
                                                {solo_overlay_panel_buffer bounce}
                                                {solo_overlay_panel bounce}
                                                {set $p0_evensolo TRUE}
                                             )
                                             kDataUnhandled
                                          }
                                       }
                                       {$task sleep 1.5}
                                       CALC_BONUS
                                       {if_else $p0_evensolo
                                          {switch $player ;streak is even, write to line 2 while 1 is showing then swap
                                             (0
                                                {solo_overlay_panel_buffer set_solo_line SET_BONUS}
                                                {set $solo_award_points 0}
                                                {solo_overlay_panel set_showing FALSE}
                                                {solo_overlay_panel_buffer set_showing TRUE}
                                                {solo_overlay_panel_buffer bounce}
                                                {solo_overlay_panel bounce}
                                                {set $p0_evensolo FALSE}
                                             )
                                             kDataUnhandled
                                          }
                                          {switch $player ;streak is odd, write to line 1 while 2 is showing then swap
                                             (0 
                                                {solo_overlay_panel set_solo_line SET_BONUS}
                                                {set $solo_award_points 0}
                                                {solo_overlay_panel_buffer set_showing FALSE}
                                                {solo_overlay_panel set_showing TRUE}
                                                {solo_overlay_panel_buffer bounce}
                                                {solo_overlay_panel bounce}
                                                {set $p0_evensolo TRUE}
                                             )
                                             kDataUnhandled
                                          }
                                       }
                                       {$task sleep 2.0}
                                       {solo_overlay_panel set_showing FALSE}
                                       {solo_overlay_panel_buffer set_showing FALSE}
                                       {set $p0_solo_notes_missed 0}
                                       {set $p0_solo_notes_hit 0}
                                       {set $p0_solo_notes_total 0}
                                    )
                                 }
                              {{XBOX_TRACK_PANEL find rail_light.lit} set color TRACK_RAIL_COLOR} ;rail color
                              {{XBOX_TRACK_PANEL find track1.lit} set color TRACK_RAIL_COLOR} ;rail color
                              {{XBOX_TRACK_PANEL find track2.lit} set color TRACK_RAIL_COLOR} ;rail color
                           }
                        }
                  }
                  )
            )
         )
      )
   )
)
(player1_solo
   (type midi)
   (eval TRUE)
   (track_name
    {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS2'
            {switch {game get_track_sym 1}
               (bass 'PART BASS')
               (drum 'PART GUITAR')
               (rhythm 'PART RHYTHM')
               (guitar 'PART GUITAR COOP')}}
            ''}
    'PART GUITAR')
   (mappings
      (default
         (events
            (116 ({set $p1_solo {! $p1_solo}}))))))
(player0_fret_pos
   (type midi)
   (inverted TRUE)
   (track_name
    {if_else {game multiplayer}
       {if_else {game multiplayer_vs}
          'PART GUITAR VS1'
          {switch {game get_track_sym 0}
             (bass 'PART BASS')
             (drum 'PART GUITAR')
             (rhythm 'PART RHYTHM')
             (guitar 'PART GUITAR COOP')}}
          ''}
       {switch
          {game get_track_sym 0}
          (bass 'PART BASS')
          (guitar 'PART GUITAR')
          (drum 'PART GUITAR')
          (lead 'PART GUITAR')
          (rhythm 'PART RHYTHM')})
   (min_gap 0.22)
   (mappings
      (default
         (events
            (40 spot_neck_fret01.mesh)
            (41 spot_neck_fret02.mesh)
            (42 spot_neck_fret03.mesh)
            (43 spot_neck_fret04.mesh)
            (44 spot_neck_fret05.mesh)
            (45 spot_neck_fret06.mesh)
            (46 spot_neck_fret07.mesh)
            (47 spot_neck_fret08.mesh)
            (48 spot_neck_fret09.mesh)
            (49 spot_neck_fret10.mesh)
            (50 spot_neck_fret11.mesh)
            (51 spot_neck_fret12.mesh)
            (52 spot_neck_fret13.mesh)
            (53 spot_neck_fret14.mesh)
            (54 spot_neck_fret15.mesh)
            (55 spot_neck_fret16.mesh)
            (56 spot_neck_fret17.mesh)
            (57 spot_neck_fret18.mesh)
            (58 spot_neck_fret19.mesh)
            (59 spot_neck_fret20.mesh)))))
(player1_fret_pos
   (inverted TRUE)
   (type midi)
   (track_name
      {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS2'
            {switch {game get_track_sym 1}
               (bass 'PART BASS')
               (drum 'PART GUITAR')
               (rhythm 'PART RHYTHM')
               (guitar 'PART GUITAR COOP')}}
            ''}
    'PART GUITAR')
   (min_gap 0.22)
   (mappings
      (default
         (events
            (40 spot_neck_fret01.mesh)
            (41 spot_neck_fret02.mesh)
            (42 spot_neck_fret03.mesh)
            (43 spot_neck_fret04.mesh)
            (44 spot_neck_fret05.mesh)
            (45 spot_neck_fret06.mesh)
            (46 spot_neck_fret07.mesh)
            (47 spot_neck_fret08.mesh)
            (48 spot_neck_fret09.mesh)
            (49 spot_neck_fret10.mesh)
            (50 spot_neck_fret11.mesh)
            (51 spot_neck_fret12.mesh)
            (52 spot_neck_fret13.mesh)
            (53 spot_neck_fret14.mesh)
            (54 spot_neck_fret15.mesh)
            (55 spot_neck_fret16.mesh)
            (56 spot_neck_fret17.mesh)
            (57 spot_neck_fret18.mesh)
            (58 spot_neck_fret19.mesh)
            (59 spot_neck_fret20.mesh)))))
(player0_parser
   (type echo)
   (track_name
      {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS1'
            {switch {game get_track_sym 0}
               (bass 'PART BASS')
               (drum 'PART GUITAR')
               (rhythm 'PART RHYTHM')
               (guitar 'PART GUITAR COOP')}}
            ''}
      {switch {game get_track_sym 0}
         (bass 'PART BASS')
         (drum 'PART GUITAR')
         (guitar 'PART GUITAR')
         (lead 'PART GUITAR')
         (rhythm 'PART RHYTHM')})
   (start_offset -1))
(player1_parser
   (type echo)
   (track_name
      {if_else {game multiplayer}
         {if_else {game multiplayer_vs}
            'PART GUITAR VS2'
             {switch {game get_track_sym 1}
                (bass 'PART BASS')
                (drum 'PART GUITAR')
                (rhythm 'PART RHYTHM')
                (guitar 'PART GUITAR COOP')}}
         ''}
    'PART GUITAR')
   (start_offset -1))
(bassist_parser
   (type echo)
   (track_name 'BAND BASS')
   (start_offset -1))
(drummer_parser
   (type echo)
   (track_name 'BAND DRUMS')
   (start_offset -1))
(drummer_kick_drum
   (type midi)
   (eval TRUE)
   (track_name 'BAND DRUMS')
   (mappings
      (default
         (events
            (36 ({handle (world kick_drum)}))
            (37 ({handle (world crash_symbal)}))))))
(drummer_kick_drum_gh1
   (type midi)
   (eval TRUE)
   (track_name 'TRIGGERS')
   (mappings
      (default
         (events
            (60 ({handle (world kick_drum)}))))))
(speaker_pulse
   (type midi)
   (eval TRUE)
   (track_name 'BAND BASS')
   (mappings
      (default
         (events
            (36 ({handle (world bass_hit)}))))))
(speaker_pulse_gh1
   (type midi)
   (eval TRUE)
   (track_name 'TRIGGERS')
   (mappings
      (default
         (events
            (61 ({handle (world bass_hit)}))))))
(keyboard_parser
   (type echo)
   (track_name 'BAND KEYS')
   (start_offset -1))
(singer_parser
   (type echo)
   (track_name 'BAND SINGER')
   (start_offset -1))
(click_parser
   (type midi)
   (track_name TRIGGERS)
   (mappings (default
      (events
         (24 click_kick)
         (25 click_snare)
         (26 click_hat)))))
(lighting_parser
   (type midi)
   (eval TRUE)
   (track_name TRIGGERS)
   (start_offset -4)
   (zero_length TRUE)
   (mappings
      (default
         (events
            (48 ({handle (world do_lighting_next_keyframe)}))
            (49 ({handle (world do_lighting_prev_keyframe)}))
            (50 ({handle (world do_lighting_first_keyframe)}))))))
(lighting_parser_gh1
   (type midi)
   (eval TRUE)
   (track_name 'TRIGGERS') ;copied guitar easy chart directly to triggers
   (start_offset -4)
   (zero_length TRUE)
   (mappings
      (default
         (events
            (68 ({handle (world do_lighting_next_keyframe)}))
            (70 ({handle (world do_lighting_prev_keyframe)}))
            (69 ({handle (world do_lighting_first_keyframe)}))))))
(effect_parser
   (type midi)
   (eval TRUE)
   (track_name TRIGGERS)
   (start_offset 0)
   (zero_length TRUE)
   (mappings
      (default
         (events
            (52 ({handle (world venue_effect)}))))))

#define BIG_NOTE_MAPPING ((mappings (default (events (110 110)))))

(big_note_parser_guitar
   (type midi)
   (track_name 'PART GUITAR' 'PART GUITAR')
   BIG_NOTE_MAPPING)
(big_note_parser_bass
   (type midi)
   (track_name 'PART BASS')
   BIG_NOTE_MAPPING)
(big_note_parser_drum
   (type midi)
   (track_name 'PART DRUM' 'PART DRUM')
   BIG_NOTE_MAPPING)
(big_note_parser_rhythm
   (type midi)
   (track_name 'PART RHYTHM')
   BIG_NOTE_MAPPING)