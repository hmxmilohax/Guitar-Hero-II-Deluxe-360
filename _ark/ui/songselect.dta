{new
   MultiSelectListPanel ;panel type
   song_select_album_panel ;panel name
   (file overshell_list.milo) ;steal this milo because im too lazy to make a new one
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {gs_tile2.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {gs_tile3.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {gs_tile4.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {gs_tile1.mesh set_local_pos_index 0 -80} ;move the mesh we want to use to the left
      {gs_tile1.mesh set_local_pos_index 2 155} ;move the mesh we want to use up
      {gs_tile1.mesh set_local_rot_index 1 30} ;rotate it a lil
      {gs_tile1.mesh set_local_scale .86 .82 .86} ;scale the mesh down some
      {sel_section.lst set_showing FALSE} ;hide the mesh lol
      {gs_title.lbl set_showing FALSE} ;hide the text too
      {$this set_album_art}
   )
   (set_album_art
;      {if_else {exists {sprint "game:/gen/album_art/" {song_provider get_symbol {game get_song_index}} "/gen/" {song_provider get_symbol {game get_song_index}} ".bmp"}}
         {if_else {== {gamecfg get_song} speedtest} ;check if on random
            {gs_tile.tex set_bitmap {sprint "ui/image/ng/random.bmp"}} ;set the random image
            {if_else {== {gamecfg get_song} speedtest9} ;check if on speedtest
               {gs_tile.tex set_bitmap {sprint "ui/image/ng/speedtest.bmp"}} ;set the image to our internal speedtest
               #ifdef HX_XBOX
               {gs_tile.tex set_bitmap {sprint "game:/gen/album_art/" {song_provider get_symbol {game get_song_index}} "/" {song_provider get_symbol {game get_song_index}} ".bmp"}} ;set the image to the image located outside of the ark
               #else
               {gs_tile.tex set_bitmap {sprint "songs/" {song_provider get_symbol {game get_song_index}} "/" {song_provider get_symbol {game get_song_index}} ".bmp"}} ;set the image to the image located outside of the ark
               #endif
            }
         }
;         {gs_tile.tex set_bitmap {sprint "ui/image/ng/photo_random3_keep.bmp"}}
;      }
   )
}
{new
   GHPanel
   selsong_overlay_panel
   (file song_overlay.milo)
   (enter ;when the screen is entered
   {$this iterate UILabel $b {$b set width 400}} ;set label width off var
   {mtv_campaign_line3_auth.lbl set width 290} ;set label width off var
   {mtv_campaign_line3_auth_shadow.lbl set width 290} ;set label width off var
   {$this iterate UILabel $b {$b set_type helveticablackcondensed}} ;set label width off var
   {selsong_overlay_panel setup_text}
      {mtv_overlay.view set_local_scale .5 1 .5} ;make the mtv overlay small
      {if_else {|| $gh3song $altsong}
         {mtv_overlay.view set_local_pos -250 -50 -100} ;move the song info overlay farther to the left
         {do
            {mtv_overlay.view set_local_pos -125 -50 -80} ;move the song info overlay to the bottom left corner of the screen, was -240 1 85
            {mtv_overlay.view set_local_rot_index 1 1} ;rotate the song info overlay to match the notebook rotation
         }
      }
;     {$this setup_text} ;run the setup_text code block below
   )
   (setup_text ;called when mtv screen is entered, as well as several other places in the hud panel to refresh stats defined below
      {do
         ($gems_hit {player0 gems_hit}) ;setup gems hit variable
         ($gems_total {'+' $gems_hit {player0 gems_passed}}) ;setup total gems that have passed the strikeline variable
         ($song {gamecfg get_song}) ;setup song variable
         ($song_text {game get_song_text}) ;setup song text variable
         ($artist_text {game get_song_artist_text}) ;setup artist variable
         ;{{song_provider get_symbol {game get_song_index}}
            ($prefix "mtv_campaign_line") ;setup prefix variable to switch between line numbers
            {mtv_campaign_song_id.view set_showing TRUE} ;show the mtv overlay
            {if_else {!= $speedmod 1} ;if song speed is set to anything other than 100%
               {if_else {&& {== {gamecfg get mode} practice} {!= {gamecfg get practice_speed} 0}} ;now check if the game mode is practice and the practice speed is set to full speed
                  {$this set_line $prefix 1
                     $song_text ;if all speeds are 100% simply show the song name on line 1
                  }
                  {$this set_line $prefix 1
                     {sprint
                        $song_text
                        " ("
                        {int {'+' 0.5 {'*' $speedmod 100}}} ;if song speed is not 100%, do math to report the song speed as a percentage on line 1
                        "%)"
                     }
                  }
               }
               {$this set_line $prefix 1 $song_text} ;if all speeds are 100% simply show the song name on line 1
            }
            {if_else {== {game get_song_index} 0}
               {$this set_line $prefix 2 "Let RNG Choose your fate"}
               {$this set_line $prefix 2
                     $artist_text ;the artist text line is always just "ARTIST" on song select
               }
            }
            {set $mtvline3
               {sprint "\n"}
            }
            {set $mtvline3
               {sprint
                  {localize authortext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                     ": "
               }
            }
            {if_else $author ;check for variable in custom songs.dta artist data
               {set $mtvline3_auth
                  {sprint
                     $author
                  }
               }
               {if_else {!= "" {localize {sprint {gamecfg get_song} "_author"}}} ; If not debug, check for author string in locale
                  {set $mtvline3_auth
                     {sprint
                        {localize
                           {sprint $song "_author"}
                        }
                     }
                  }
                  {set $mtvline3_auth {sprint {localize unknowntext}}}
               }
            }
            
            {if_else $author
               {if_else {||
                           {== $author "Harmonix"} {== $author "harmonix"} {== $author "HARMONIX"}
                           {== $author "Harmonix, thardwardy"} {== $author "Harmonix, raphaelgoulart"}
                           {== $author "Harmonix, El Fish"} {== $author "Harmonix, mariteaux"}
                           {== $author "Harmonix, AddyMills"}
                        }
                  {mtv_campaign_line3_auth.lbl set color {pack_color 0 .5 1}}
                  {if_else {|| {== $author "Mariteaux"} {== $author "MARITEAUX"} {== $author "mariteaux"} {== $author "Exilelord, mariteaux"}}
                     {mtv_campaign_line3_auth.lbl set color {pack_color 1 .52 .24}}
                     {if_else {|| {== $author "Neversoft"} {== $author "NEVERSOFT"} {== $author "neversoft"}}
                        {mtv_campaign_line3_auth.lbl set color {pack_color .78 .31 0}}
                        {if_else {|| {== $author "Addymills"} {== $author "ADDYMILLS"} {== $author "addymills"} {== $author "AddyMills"}}
                           {mtv_campaign_line3_auth.lbl set color {pack_color .07 .63 0}}
                           {mtv_campaign_line3_auth.lbl set color {pack_color 1 1 1}}
                        }
                     }
                  }
               }
               {mtv_campaign_line3_auth.lbl set color {pack_color 1 1 1}}
            }
            {if_else $songalbum ;check for variable in custom songs.dta artist data
               {set $mtvline4
                  {sprint
                     {localize albumtext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                     ": "
                     $songalbum
                  }
               }
               {set $mtvline4 {sprint {localize albumtext} ": " {localize unknowntext}}}
            }
            
            {if_else $songyear ;check for variable in custom songs.dta artist data
               {set $mtvline5
                  {sprint
                     {localize yeartext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                     ": "
                     $songyear
                  }
               }
               {set $mtvline5 {sprint {localize yeartext} ": " {localize unknowntext}}}
            }
            
            
            {if_else $songgenre ;check for variable in custom songs.dta artist data
               {set $mtvline6
                  {sprint
                     {localize genretext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                     ": "
                     $songgenre
                  }
               }
               {set $mtvline6 {sprint {localize genretext} ": " {localize unknowntext}}}
            }
            
            {if_else $songorigin ;check for variable in custom songs.dta artist data
               {set $mtvline7
                  {sprint
                     {localize origintext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                     ": "
                     $songorigin
                  }
               }
               {set $mtvline7 {sprint {localize origintext} ": " {localize unknowntext}}}
            }
            
            {if_else {song_provider has_instrument {gamecfg get_song} guitar}
               kDataUnhandled
               {set $songguitarrank -1}
            }
            {set $mtvline8 {sprint {localize guitarpart} ":"}}
            ;{if {! $songguitarrank} ;if we don't know the difficulty rank
            ;   {set $songguitarrank {random_int 1 8}} ;randomize it!
            ;}
            {if {> $songguitarrank 7}
               {set $songguitarrank 7}
            }
            {switch $songguitarrank
               (-1 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize nopart}}})
               (0 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize unknowntext}}})
               (1 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize onestar}}})
               (2 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize twostar}}})
               (3 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize threestar}}})
               (4 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize fourstar}}})
               (5 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize fivestar}}})
               (6 {mtv_campaign_line8_diff.lbl set color {pack_color 1 1 1}} {set $mtvline8diff {sprint {localize sixstar}}})
               (7 {mtv_campaign_line8_diff.lbl set color {pack_color 0.84 0.30 0.32}} {set $mtvline8diff {sprint {localize sevenstar}}})
            }
            {if_else {song_provider has_instrument {gamecfg get_song} bass}
               {set $mtvline9 {sprint {localize basspart} ":"}}
               {if_else {song_provider has_instrument {gamecfg get_song} rhythm}
                  {set $mtvline9 {sprint {localize rhythmpart} ":"}}
                  {set $mtvline9 {sprint {localize basspart} ":"}}
               }
            }
            ;{if {! $songbassrank} ;if we don't know the difficulty rank
            ;   {set $songbassrank {random_int 1 8}} ;randomize it!
            ;}
            ;{if {! $songrhythmrank} ;if we don't know the difficulty rank
            ;   {set $songrhythmrank {random_int 1 8}} ;randomize it!
            ;}
            {if {> $songbassrank 7}
               {set $songbassrank 7}
            }
            {if {> $songrhythmrank 7}
               {set $songrhythmrank 7}
            }
            {if_else {song_provider has_instrument {gamecfg get_song} bass}
               {switch $songbassrank
                  (-1 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize nopart}}})
                  (0 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize unknowntext}}})
                  (1 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize onestar}}})
                  (2 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize twostar}}})
                  (3 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize threestar}}})
                  (4 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize fourstar}}})
                  (5 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize fivestar}}})
                  (6 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize sixstar}}})
                  (7 {mtv_campaign_line9_diff.lbl set color {pack_color 0.84 0.30 0.32}} {set $mtvline9diff {sprint {localize sevenstar}}})
               }
               {if_else {song_provider has_instrument {gamecfg get_song} rhythm}
                  {switch $songrhythmrank
                     (-1 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize nopart}}})
                     (0 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize unknowntext}}})
                     (1 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize onestar}}})
                     (2 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize twostar}}})
                     (3 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize threestar}}})
                     (4 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize fourstar}}})
                     (5 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize fivestar}}})
                     (6 {mtv_campaign_line9_diff.lbl set color {pack_color 1 1 1}} {set $mtvline9diff {sprint {localize sixstar}}})
                     (7 {mtv_campaign_line9_diff.lbl set color {pack_color 0.84 0.30 0.32}} {set $mtvline9diff {sprint {localize sevenstar}}})
                  }
                  {set $mtvline9diff {sprint {localize nopart}}}
               }
            }
            {if_else {song_provider has_instrument {gamecfg get_song} drum}
               kDataUnhandled
               {set $songdrumrank -1}
            }
            {set $mtvline10 {sprint {localize drumpart} ":"}}
            ;{if {! $songdrumrank} ;if we don't know the difficulty rank
            ;   {set $songdrumrank {random_int 1 8}} ;randomize it!
            ;}
            {if {> $songdrumrank 7}
               {set $songdrumrank 7}
            }
            {switch $songdrumrank
               (-1 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize nopart}}})
               (0 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize unknowntext}}})
               (1 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize onestar}}})
               (2 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize twostar}}})
               (3 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize threestar}}})
               (4 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize fourstar}}})
               (5 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize fivestar}}})
               (6 {mtv_campaign_line10_diff.lbl set color {pack_color 1 1 1}} {set $mtvline10diff {sprint {localize sixstar}}})
               (7 {mtv_campaign_line10_diff.lbl set color {pack_color 0.84 0.30 0.32}} {set $mtvline10diff {sprint {localize sevenstar}}})
            }
            {if_else $songduration ;check for variable in custom songs.dta artist data
               {do
                  {set $songminutes {int {/ {int {/ $songduration 1000}} 60}}}
                  {set $songseconds {- {int {/ $songduration 1000}} {* $songminutes 60}}}
                  {set $mtvline11
                     {sprint
                        {localize durationtext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                        ": "
                        {if_else {> $songminutes 9}
                           $songminutes
                           {switch $songminutes
                              (0 "00")
                              (1 "01")
                              (2 "02")
                              (3 "03")
                              (4 "04")
                              (5 "05")
                              (6 "06")
                              (7 "07")
                              (8 "08")
                              (9 "09")
                           }
                        }
                        ":"
                        {if_else {> $songseconds 9}
                           $songseconds
                           {switch $songseconds
                              (0 "00")
                              (1 "01")
                              (2 "02")
                              (3 "03")
                              (4 "04")
                              (5 "05")
                              (6 "06")
                              (7 "07")
                              (8 "08")
                              (9 "09")
                           }
                        }
                     }
                  }
               }
               {set $mtvline11 {sprint {localize durationtext} ": " {localize unknowntext}}}
            }
               {if_else {== {gamecfg get_song} speedtest} ;check if on random
                  {do
                     {$this set_line $prefix 3 " "}
                     {$this set_line $prefix 3_auth " "}
                     {$this set_line $prefix 4 " "}
                     {$this set_line $prefix 5 " "}
                     {$this set_line $prefix 6 " "}
                     {$this set_line $prefix 7 " "}
                     {$this set_line $prefix 8 " "}
                     {$this set_line $prefix 8_diff " "}
                     {$this set_line $prefix 9 " "}
                     {$this set_line $prefix 9_diff " "}
                     {$this set_line $prefix 10 " "}
                     {$this set_line $prefix 10_diff " "}
                     {$this set_line $prefix 11 " "}
                  }
                  {do
                     {$this set_line $prefix 3
                     {sprint $mtvline3} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 3_auth
                        {sprint $mtvline3_auth} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 4
                        {sprint $mtvline4} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 5
                        {sprint $mtvline5} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 6
                        {sprint $mtvline6} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 7
                        {sprint $mtvline7} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 8
                        {sprint $mtvline8} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 8_diff
                        {sprint $mtvline8diff} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 9
                        {sprint $mtvline9} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 9_diff
                        {sprint $mtvline9diff} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 10
                        {sprint $mtvline10} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 10_diff
                        {sprint $mtvline10diff} ;if autoplay, just put the static shit
                     }
                     {$this set_line $prefix 11
                        {sprint $mtvline11} ;if autoplay, just put the static shit
                     }
                  }
               }
            }
   )
   (set_line ;called in mtv overlay to apply the text to two labels at once
      ($prefix $i $text) ;setup variables
      {{sprint $prefix $i ".lbl"} set_localized_text $text} ;set the main text objects
      {{sprint $prefix $i "_shadow.lbl"} set_localized_text $text} ;set the shadow text objects
   )
   (show_overlay ;code to run to show the overlay or not based on a variable
      ($show) ;setup variable
      {$this set_showing $show} ;show or hide based off variable
      {$this set_paused FALSE} ;we refresh the mtv overlay alot, so we never want it paused
   )
}
{new
   GHPanel ;panel type
   sel_song_panel ;panel name
   (file ;the milo file used for the panel
      {if_else $gh3song ;check if gh3 song variable is active
         {if_else $loopsong ;check if loop song variable is active
            {switch $gh3list ;gh3 list variable is randomized elsewhere, use a specific milo based on the current var
               (1 sel_song_gh3_loop_both.milo) ;loop song is true so use looped gh3 menus
               (2 sel_song_gh3_loop_gum.milo) ;loop song is true so use looped gh3 menus
               (3 sel_song_gh3_loop_string.milo) ;loop song is true so use looped gh3 menus
            }
            {switch $gh3list ;gh3 list variable is randomized elsewhere, use a specific milo based on the current var
               (1 sel_song_gh3_both.milo) ;loop song is false so use normal gh3 menus
               (2 sel_song_gh3_gum.milo) ;loop song is false so use normal gh3 menus
               (3 sel_song_gh3_string.milo) ;loop song is false so use normal gh3 menus
            }
         }
         {if_else $altsong ;if we aren't in gh3 song list, check if we should use the alt song list
            sel_song_alt.milo ;alternate gh1 style song list
            sel_song.milo ;gh2dx notebook style song list
         }
      }
   )
   (metamusic_on_exit TRUE) ;once we leave this screen we want to turn back on the metaloops
   (focus ss_song.lst) ;focus on the list in this panel
   (joypad ;change joypad default behaviors
      (hold_ms 180) ;ms to wait before starting to scroll while holding up/down
      (repeat_ms 30) ;once holding up/down, how fast we scroll through items in a list
   )
   (page_down
      {$this update_pos}
      {$this update_pos}
   )
#ifdef HX_XBOX
   (load ;once the panel is fully loaded?
      {profilemgr add_sink $this storage_changed} ;add a sink to check for storage being changed
      {content_mgr start_enumeration} ;start checking for dlc
   )
   (storage_changed ;if storage has been changed
      {$this clear_cache} ;clear the song cache
      {ui goto_screen storage_changed_screen} ;go to dialog screen telling the user they fucked up
   )
#endif
   (random_char ;call to randomize the current character
      {if {! $forcecharacter} ;check var to make sure the user hasn't picked their own character
         {switch $randomnumber ;perform actions based on the current random number, generated via (venue_randomizer)
            (0  {game set_character punk1 TRUE}) ;list of all valid characters
            (1  {game set_character punk1 TRUE})
            (2  {game set_character punk2 TRUE})
            (3  {game set_character alterna1 TRUE})
            (4  {game set_character alterna2 TRUE})
            (5  {game set_character glam1 TRUE})
            (6  {game set_character glam2 TRUE})
            (7  {game set_character goth2 TRUE})
            (8  {game set_character goth1 TRUE})
            (9  {game set_character metal1 TRUE})
            (10 {game set_character metal2 TRUE})
            (11 {game set_character rockabill1 TRUE})
            (12 {game set_character rockabill2 TRUE})
            (13 {game set_character rock2 TRUE})
            (14 {game set_character rock1 TRUE})
            (15 {game set_character deathmetal1 TRUE})
            (16 {game set_character deathmetal2 TRUE})
            (17 {game set_character classic TRUE})
            (18 {game set_character funk1 TRUE})
            (19 {game set_character grim TRUE})
            (20 {game set_character grim TRUE})
         }
      }
   )
   (random_venue ;call to randomize the current venue
      {if {! $forcevenue} ;check var to make sure the user hasn't picked their own venue
         {switch $randomvenuenumber ;perform actions based on the current random number, generated via (venue_randomizer)
            (0 {game set_venue battle TRUE}) ;list of all valid venues
            (1 {game set_venue battle TRUE})
            (2 {game set_venue small1 TRUE})
            (3 {game set_venue small2 TRUE})
            (4 {game set_venue big TRUE})
            (5 {game set_venue theatre TRUE})
            (6 {game set_venue fest TRUE})
            (7 {game set_venue arena TRUE})
            (8 {game set_venue stone TRUE})
            (9 {game set_venue stone TRUE})
         }
      }
   )
   (random_guitar ;call to randomize the current guitar
      {if {! $forceguitar} ;check var to make sure the user hasn't picked their own guitar
         {switch $randomguitarnumber ;perform actions based on the current random number, generated via (venue_randomizer)
            (0  {game set_guitar lespaul lp_cherry}) ;list of all valid guitars. you must supply the root guitar name + the name of the skin, found in /config/guitars.dta
            (1  {game set_guitar lespaul lp_cherry})
            (2  {game set_guitar lespaul lp_cayenne})
            (3  {game set_guitar lespaul lp_goddessburst})
            (4  {game set_guitar lespaul lp_zakk})
            (5  {game set_guitar sg sg_cherry})
            (6  {game set_guitar sg sg_white})
            (7  {game set_guitar sg sg_gt})
            (8  {game set_guitar sg sg_flames})
            (9  {game set_guitar flying_v fv_white})
            (10 {game set_guitar flying_v fv_v2})
            (11 {game set_guitar flying_v fv_century})
            (12 {game set_guitar flying_v fv_red})
            (13 {game set_guitar explorer exp_ebony})
            (14 {game set_guitar explorer exp_nat})
            (15 {game set_guitar explorer exp_sun})
            (16 {game set_guitar explorer exp_white})
            (17 {game set_guitar explorer exp_swirl})
            (18 {game set_guitar lespaul_doublecut lp_dbl_white})
            (19 {game set_guitar lespaul_doublecut lp_dbl_yellow})
            (20 {game set_guitar lespaul_doublecut lp_dbl_resin})
            (21 {game set_guitar firebird fb_burst})
            (22 {game set_guitar firebird fb_blue})
            (23 {game set_guitar firebird fb_ebony})
            (24 {game set_guitar firebird fb_leopard})
            (25 {game set_guitar epiphone_coronet coronet_brown})
            (26 {game set_guitar epiphone_coronet coronet_cherry})
            (27 {game set_guitar epiphone_coronet coronet_burst})
            (28 {game set_guitar epiphone_coronet coronet_green})
            (29 {game set_guitar kramer_vanguard van_black})
            (30 {game set_guitar kramer_vanguard van_yellow})
            (31 {game set_guitar moderne mod_nat})
            (32 {game set_guitar moderne mod_cherry})
            (33 {game set_guitar corvus cor_yellow})
            (34 {game set_guitar corvus cor_nat})
            (35 {game set_guitar es335 es_maple})
            (36 {game set_guitar es335 es_cherry})
            (37 {game set_guitar kramer_650 650_stripe})
            (38 {game set_guitar kramer_650 650_white})
            (39 {game set_guitar eds eds_cherry})
            (40 {game set_guitar eds eds_white})
            (41 {game set_guitar lespaul_doublecut_sticker lp_dbl_sticker})
            (42 {game set_guitar lespaul_sonex lp_sonex})
            (43 {game set_guitar lespaul_marauder lp_marauder})
            (44 {game set_guitar epiphone_casino casino})
            (45 {game set_guitar epiphone_sheraton sheraton})
            (46 {game set_guitar chet_atkins chet_orange})
            (47 {game set_guitar fish_reward fish})
            (48 {game set_guitar usa_reward usa})
            (49 {game set_guitar coffin_reward coffin})
            (50 {game set_guitar viking_reward viking})
            (51 {game set_guitar snaketapus_reward snaketapus})
            (52 {game set_guitar eyeball_reward eyeball})
            (53 {game set_guitar battleaxe_reward battleaxe})
            (54 {game set_guitar log_reward log})
            (55 {game set_guitar scythe scythe})
            (56 {game set_guitar guitar_red_octane guitar_red_octane})
            (57 {game set_guitar bass_musicman bass_music_black})
            (58 {game set_guitar bass_musicman_lava bass_music_lava})
            (59 {game set_guitar bass_sg_mahogany bass_sg_mahog})
            (60 {game set_guitar bass_sg_cream bass_sg_cream})
            (61 {game set_guitar bass_grabber_cherry bass_grab_cherry})
            (62 {game set_guitar bass_grabber_maple bass_grab_maple})
            (63 {game set_guitar bass_thunderbird_ebony bass_tb_ebony})
            (64 {game set_guitar bass_thunderbird_burst bass_tb_burst})
            (65 {game set_guitar bass_hofner bass_hofner})
            (66 {game set_guitar bass_hofner bass_hofner})
         }
      }
   )
   (song_randomizer ;song randomization task
      {if_else {== {gamecfg get_song} speedtest} ;our random ong "button" is the first song in campaign.dta, which becomes the first song on song select. song 0 will always be random song
         {do
            {game set_song {campaign pick_attract_song}} ;attract mode song function. It just picks a random song, repurposed for our use case
            {set $songrandomized TRUE} ;this var will tell the panel we clicked the random button, so we can return to the random button
            {if
               {|| ;or
                   {== {game get_song} speedtest} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
                   {== {game get_song} speedtest2} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
                   {== {game get_song} speedtest3} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
                   {== {game get_song} speedtest4} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
                   {== {game get_song} speedtest5} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
                   {== {game get_song} speedtest6} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
                   {== {game get_song} speedtest7} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
                   {== {game get_song} speedtest8} ;check if random song is an internal speedtest. the user should never play these or the save will corrupt!
               }
               {game set_song speedtest9} ;this is our valid speedtest. internally this is set up as a bonus song
            }
            {ui goto_screen qp_selpart_screen} ;we go to the select part screen either way
         }
         {ui goto_screen qp_selpart_screen} ;we go to the select part screen either ways
      }
   )
   (venue_randomizer
      {if {! $forcecharacter} ;check if the user has not picked a specific character
         {set $randomnumber {random_int 0 20}} ;random number generator on available characters
         {$this random_char} ;run random_char block in this panel
      }
      {if {! $forcevenue} ;check if the user has not picked a specific venue
         {set $randomvenuenumber {random_int 0 9}} ;random number generator on available venues
         {$this random_venue} ;run random_venue block in this panel
      }
      {if {! $forceguitar} ;check if the user has not picked a specific guitar
         {set $randomguitarnumber {random_int 0 66}} ;random number generator on available guitars
         {$this random_guitar} ;run random_guitar block in this panel
      }
   )
   (graphics_handler ;handles the graphics for the panel in various states
      {if_else $altsong ;check if we are using alt song milo
         {do
            {selsong_overlay_panel set_showing TRUE}
            {sd_select.lbl set_local_pos 0 150 200} ;move the title label
            {sd_select.lbl set_local_scale 5 400 5} ;scale the title label
            {sd_select.lbl set_localized_text {localize ss_choosesong}} ;set text of the title label
            {ss_song.lst set_local_pos 15 280 170} ;change the position of the list
         }
         {if_else $gh3song ;check if we are using the gh3 song list milo
            {do
               {selsong_overlay_panel set_showing TRUE}
               {if_else $loopsong ;check if we are using a looped gh3 song list milo or not
                  {do ;if we are using loop
                     {ss_song.lst set_local_pos 25 280 170} ;position the list
                     {ss_song.lst set_local_scale 1 1 0.975} ;scale the list
                  }
                  {ss_song.lst set_local_pos 25 280 170} ;if we are not using loop song milo just set the position
               }
               {tape_vert3.mesh get_local_pos $tapeposx $tapeposy $tapeposz}
               {tape_vert3.mesh set_local_pos $tapeposx $tapeposy 80}
            }
            {do
               {chooseprof.view set_local_pos_index 0 75}
               {cp_title.lbl set_local_pos 60 50 -15} ;move the title label
               {cp_title.lbl set_localized_text {localize ss_choosesong}} ;set text of the title label
               {pencil.mesh set_local_pos 250 30 -30} ;move the pencil
               {pencil_shadow.mesh set_local_pos 180 30 -30} ;move the pencil shadow
               {notebook.mesh set_local_scale 1.4 1 1} ;scale the notebook a little bit
               {notebook_cover.mesh set_local_scale 1.4 1 1} ;scale the notebook a little bit
               {ss_song.lst set_local_pos 70 32 43} ;move the list
               {ss_song.lst set_local_scale_index 0 .2} ;move the list
               {ss_song.lst set_local_scale_index 2 .2} ;move the list
               ;{ss_song.lst set_local_pos 0 0 0} ;move the list
               {ss_song.lst set_local_rot_index 2 -2} ;rotate the lisst a little bit
            }
         }
      }
      {ss_song.lst set spacing 50}
   )
   (enter ;when the screen is entered
      POORSPY_RESET_HANDLER  ;reset poorspy buttons pressed
      {selsong_overlay_panel set_showing FALSE}
      {selsong_overlay_panel setup_text} ;setup the mtv overlay panel for the song screen
      {$this venue_randomizer} ;run the venue randomizer code block in this panel
      {$this graphics_handler} ;run the graphics handler code block in this panel
      {set $gameentered FALSE} ;variable setup to double check we aren't in gameplay
      {if $songrandomized ;check variable to see if we last entered this screen from the random song button
         {set $songrandomized FALSE} ;turn off the variable for next user song selection
         {game set_song_index 0} ;reset the internal song selected back to 0 (random)
         {ss_song.lst set_selected {game get_song_index}} ;set the list to the currently internally selected song
      }
      {ss_song.lst set circular $loopsong} ;sets the song list to loop around based off variable
      {set $author FALSE} ;we dont use the author variable until the song is loaded, reset the variable to false
      {{ui current_screen} turn_off_ambient} ;turn off meta music because we will be hearing song previews shortly
      {$this refresh} ;after setting everything up, run the refresh code block
      {if {>= {song_provider list_length} 249}
         {set $disable_save 1}
      }
   )
   (update_song_info
      {ss_song.lst set_selected {game get_song_index}} ;select the internally selected song on the list
#ifdef HX_XBOX
         {profilemgr disable_xmp} ;disable the xbox guide button
#endif
      {meta_music stop} ;stop playing background music
      {$this update_pos} ;run the update_pos code block
   )
   (exit ;when the panel is exited
      {song_preview ''} ;reset the current song preview to nothing
      {if [metamusic_on_exit] ;check if we are supposed to play meta music when we leave
         {meta_music start} ;play meta music
#ifdef HX_XBOX
         {profilemgr enable_xmp} ;enable the xbox guide button
#endif
      }
      {set [metamusic_on_exit] TRUE} ;we are supposed to be playing meta music when we leave song select screens
#ifndef HX_XBOX
      {song_provider set_quickplay TRUE} ;gh2dx does not use quickplay
#else
      {song_provider set_mode kSongsCareer} ;gh2dx uses career for "quickplay"
#endif
   )
#ifdef HX_XBOX
   (unload ;once the panel is removed from memory?
      {profilemgr remove_sink $this storage_changed} ;when we leave, remove the storage_changed sink
   )
#endif
   (SCROLL_MSG ;when the user changes list position
      {$this update_pos} ;run the below update_pos code block
   )
   (update_pos ;called from SCROLL_MSG, update_song_info, and page_down
      {do
         ($pos {ss_song.lst selected_pos}) ;set up local var for this code block
         {set $songalbum FALSE}
         {set $songartist FALSE}
         {set $songorigin FALSE}
         {set $songduration 0}
         {set $songyear FALSE}
         {set $author FALSE}
         {set $songgenre FALSE}
         {set $songguitarrank 0}
         {set $songbassrank 0}
         {set $songdrumrank 0}
         {set $songrhythmrank 0}
         {game set_song_index $pos} ;set the internal song to the current song list position
#ifdef HX_XBOX
         {$this cache_song} ;ayo gh2 song cache? (idk what this does it's in code)
#endif
         {song_preview {game get_song}} ;call the song's music preview
         ;{set $songalbumfake {gamecfg get_song_caption {game get_song}}}
         {song_select_album_panel set_album_art}
         {selsong_overlay_panel set_showing TRUE}
         {song_select_album_panel set_showing TRUE}
         {selsong_overlay_panel setup_text} ;setup the mtv overlay panel for the song screen
      }
   )
   (beat_song ;debug code block
      ($score) ;carry through score variable from elsewhere, i'd imagine coop_max_scores?
      {if {$this is_up} ;check if the song list is up
         {do
            ($index {ss_song.lst selected_pos}) ;set up local var for this code block
            ($song {song_provider get_symbol $index}) ;set up local var for this code block
            {campaign cheat_beat_song $song $score} ;beat the currently selected song on the list
            {$this refresh} ;run the refresh code block in this panel
         }
      }
   )
   (gold_song ;debug code block
      {if {$this is_up} ;check if the song list is up
         {campaign cheat_gold_song ;campaign debug cheat
            {song_provider get_symbol {ss_song.lst selected_pos}} ;gold star the currently selected song
         }
         {$this refresh} ;run the refresh code block in this panel
      }
   )
   (refresh ;called from various places in the panel
#ifdef HX_XBOX
      {song_provider set_mode kSongsCareer} ;set the song provider mode to career
#else
      {song_provider set_quickplay TRUE} ;set the song provider mode to career but on ps2
#endif
      {ss_song.lst set_provider song_provider} ;fill the song list with data from the song_provider
      {if {== {game get_song_index} -1} ;check if we have an invalid song selection
         {game set_song_index 0} ;reset song to song 0
      }
      {$this update_song_info} ;run the update_song_info code block
      {checkmark.mesh set_showing FALSE} ;career has a checkmark for completed songs. we dont use this, hide it
   )
}
{new
   GHScreen ;screen type
   sel_song_screen ;screen name
   (panels meta sel_song_panel selsong_overlay_panel song_select_album_panel helpbar) ;panels included in this screen in draw order
   (focus sel_song_panel) ;panel to focus
   (helpbar ;sets up the help bar for this screen
      (default
         (
            (fret1 help_continue)
            (fret2 help_back)
            (strum help_updown)
         )
      )
   )
   (sel_song_career FALSE) ;gh2dx uses career mode for the song select to show scores
   (enter
      {if $gh3song ;check if gh3 song select var is set
         {helpbar set_showing FALSE} ;we don't show the help bar in gh3 song select
      }
   )
   (BUTTON_DOWN_MSG ;when any button is pressed
      {if {== $button kPad_Tri} ;check if we pressed triangle
         {$this backwards_anim} ;animate the screen going backwards
         {synth play_sequence button_back.cue} ;play the back button sound effect
         {helpbar set_showing TRUE} ;show the help bar again
         {ui goto_screen main_screen} ;go back to the main menu
      }
      kDataUnhandled ;don't do anything special if other buttons are pressed
   )
   (SELECT_START_MSG
      {switch {gamecfg get mode} ;check which mode we are currently in
         (career {$this song_randomizer}) ;run the song_randomizer code block, leads to qp_selpart_screen
         (quickplay {$this song_randomizer}) ;run the song_randomizer code block, leads to qp_selpart_screen
         (multi_vs kDataUnhandled)
         (multi_fo {ui goto_screen multi_fo_seldiff_screen})
         (practice {$this song_randomizer}) ;run the song_randomizer code block, leads to qp_selpart_screen
         (multi_coop ;if the current mode is coop
            {gamecfg set_track 0 0} ;set player 1 to the first track
            {gamecfg set_track 1 1} ;set player 2 to the second track
            {if_else ;check if
               {|| ;or
                  {song_provider has_instrument {gamecfg get_song} bass} ;if the song has bass
                  {song_provider has_instrument {gamecfg get_song} rhythm} ;if the song has bass
               }
               {ui goto_screen selpart_screen} ;if the song has either bass or rhythm, go to select part screen
               {ui goto_screen multi_coop_seldiff_screen} ;if it doesn't, go to the coop select difficulty screen
             }
         )
      }
      {sel_song_panel set metamusic_on_exit TRUE} ;once we leave the screen, make sure we play our meta music again
      kDataUnhandled ;fail over if none of the above conditions are met
   )
}

{new
   GHScreen ;screen type
   storage_changed_screen ;screen name
   DIALOG_SCREEN ;dialog screen macro for milo file used and other bits
   (enter ;when the screen is entered
      {dialog setup mc_continue '' button1 mc_storage_changed mc_title_error} ;set up the current dialog screen
   )
   (SELECT_START_MSG ;when an on screen option is selected
      {ui goto_screen main_screen} ;go back to the main menu
   )
}