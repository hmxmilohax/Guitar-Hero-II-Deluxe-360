{new GHPanel selpart_overlay_panel
   (file mtv_overlay.milo)
   (enter ;when the screen is entered
      {{selpart_overlay_panel find mtv_campaign_line1.lbl} set color MTV_OVERLAY_COLOR} ;custom mtv overlay color
   {{selpart_overlay_panel find mtv_campaign_line2.lbl} set color MTV_OVERLAY_COLOR} ;custom mtv overlay color
   {{selpart_overlay_panel find mtv_campaign_line3.lbl} set color MTV_OVERLAY_COLOR} ;custom mtv overlay color
   {selpart_overlay_panel setup_text}
      {mtv_overlay.view set_local_scale .5 1 .5} ;make the mtv overlay small
      {mtv_overlay.view set_local_pos -100 -50 80} ;move the mtv overlay to the top left corner of the screen, was -240 1 85
;     {$this setup_text} ;run the setup_text code block below
   )
   (setup_text ;called when mtv screen is entered, as well as several other places in the hud panel to refresh stats defined below
      {do
         ($gems_hit {player0 gems_hit}) ;setup gems hit variable
         ($gems_total {'+' $gems_hit {player0 gems_passed}}) ;setup total gems that have passed the strikeline variable
         ($song {gamecfg get_song}) ;setup song variable
         ($song_text {game get_song_text}) ;setup song text variable
         ($artist_text {game get_song_artist_text}) ;setup artist variable
         {do
            ($prefix "mtv_campaign_line") ;setup prefix variable to switch between line numbers
            {mtv_campaign_song_id.view set_showing TRUE} ;show the mtv overlay
            {if_else {!= $speedmod 1} ;if song speed is set to anything other than 100%
               {if_else {&& {== {gamecfg get mode} practice} {!= {gamecfg get practice_speed} 0}} ;now check if the game mode is practice and the practice speed is set to full speed
                  {$this set_line $prefix 1
                     $song_text ;if all speeds are 100% simply show the song name on line 1
                  }
                  {$this set_line $prefix 1
                     {sprint
                        $song_text
                        " ("
                        {int {'+' 0.5 {'*' $speedmod 100}}} ;if song speed is not 100%, do math to report the song speed as a percentage on line 1
                        "%)"
                     }
                  }
               }
               {$this set_line $prefix 1 $song_text} ;if all speeds are 100% simply show the song name on line 1
            }
            {$this set_line $prefix 2
               {sprint
                  {localize performertext}
                  $artist_text ;the artist text line is always just "BY - ARTIST"
               }
            }
            {set $mtvline3
               {sprint "\n"}
            }
            {if {!= "" {localize {sprint {gamecfg get_song} "_author"}}} ; If not debug, check for author string in locale
               {set $mtvline3
                  {sprint
                     "\n"
                     {localize authortext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                     ": "
                     {localize
                        {sprint $song "_author"}
                     }
                     "\n"
                  }
               }
            }
            {if_else $author ;check for author variable in DLC contexts.dta
               {set $mtvline3
                  {sprint
                     "\n"
                     {localize authortext} ; $mtvline3 will hold everything that only needs to be set one time, before the song
                     ": "
                     $author
                     "\n"
                  }
               }
            }
               {$this set_line $prefix 3
                  {sprint $mtvline3} ;if autoplay, just put the static shit
               }
            }
      }
   )
   (set_line ;called in mtv overlay to apply the text to two labels at once
      ($prefix $i $text) ;setup variables
      {{sprint $prefix $i ".lbl"} set_localized_text $text} ;set the main text objects
      {{sprint $prefix $i "_shadow.lbl"} set_localized_text $text} ;set the shadow text objects
   )
   (show_overlay ;code to run to show the overlay or not based on a variable
      ($show) ;setup variable
      {$this set_showing $show} ;show or hide based off variable
      {$this set_paused FALSE} ;we refresh the mtv overlay alot, so we never want it paused
   )
}
{new UIPanel qp_selpart_bg_panel
   (file {if_else {== $menutheme 80s} ;which milo file to use based on the 80s theme flag
    selpart_bg_80s.milo selpart_bg.milo}) ;use 80s if 80s use gh2 if not 80s
}
{new GHPanel qp_selpart_panel
   (file {if_else {== $menutheme 80s} ;which milo file to use based on the 80s theme flag
      practice_selpart_80s.milo practice_selpart.milo}) ;use 80s if 80s use gh2 if not 80s
   (focus part0.btn) ;focus on the top button on first entry (guitar/lead)
   (sel_buttons part0.btn part1.btn part2.btn) ;define what buttons are available in this screen (part0 guitar/lead, part1 rhythm/bass, part2 drums)
   (set_button_text ;setup button text, called when screen is entered
      {do
         ($song {gamecfg get_song}) ;setup song variable for use in this block
         {part0.btn set_text {sprint "sg_" {song_provider get_instrument $song 0}}} ;for some reason hmx adds "sg_" to all their instrument localizations. set part 0 label to the 1st instrument track name
         {if_else {|| {song_provider has_instrument {gamecfg get_song} bass} {song_provider has_instrument {gamecfg get_song} rhythm}}
            {part1.btn set_text {sprint "sg_" {song_provider get_instrument $song 1}}} ;set part 1 label to the 2nd instrument track name in the song definition
            {do
               {part1.btn set_state kDisabled} ;if not, disable the button
               {part1.btn set_showing FALSE} ;if not, hide the button
            }
         }
         {if {|| {song_provider has_instrument {gamecfg get_song} bass} {song_provider has_instrument {gamecfg get_song} rhythm}}
            {if {== {song_provider get_instrument $song 1} "rhythm"} ;if the second instrument track in the song definition is rhythm
               {part0.btn set_text "sg_lead"} ;then set part 0 to be "lead" instead of "guitar"
            }
         }
         {part2.btn set_text "sg_drum"} ;always set part 2 label to sg_drum since nothing else uses this
         {if_else {song_provider has_instrument {gamecfg get_song} drum} ;check if there is an instrument with the name "drum"
            {part2.btn set_text "sg_drum"} ;if there is, set the text to drum again
            {do
               {part2.btn set_state kDisabled} ;if not, disable the button
               {part2.btn set_showing FALSE} ;if not, hide the button
            }
         }
      }
   )
   (enter ;when the screen is entered
      POORSPY_RESET_HANDLER ;reset poorspy buttons pressed
      {selpart_overlay_panel setup_text}
      {do
         ($song {gamecfg get_song}) ;setup variable for this code block
         {if {|| {song_provider has_instrument {gamecfg get_song} bass} {song_provider has_instrument {gamecfg get_song} rhythm}}
            {switch {song_provider get_instrument $song 1} ;switch action based on result of which instrument is second in the song definition
               (bass {gamecfg set_track_type bass}) ;if it's bass, set the track type to bass
               (rhythm {gamecfg set_track_type rhythm}) ;if it's rhythm, set the track type to rhythm
            }
         }
         {$this set_button_text} ;run the set_button_text code block above
      }
   )
   (SELECT_START_MSG ;what to do when a button is pressed or a menu item is selected
      {if {== $component part0.btn}
         {switch {gamecfg get mode}
            (career {gamecfg set_track 0 0} {if_else $diffseen {ui goto_screen manage_gig_screen} {ui goto_screen qp_diff_screen}}) ;go to titty screen if a song has been played this session, if not go to part select
            (quickplay {gamecfg set_track 0 0} {ui goto_screen qp_diff_screen})
            (multi_vs
               {gamecfg set_track 0 0}
               {gamecfg set_track 1 0}
            )
            (multi_fo
               {gamecfg set_track 0 0}
               {gamecfg set_track 1 0}
            )
            (practice {gamecfg set_track 0 0} {if_else $diffseen {ui goto_screen manage_gig_screen} {ui goto_screen practice_diff_screen}})
         }
      }
      {if {== $component part1.btn}
         {switch {gamecfg get mode}
            (career {gamecfg set_track 0 1} {if_else $diffseen {ui goto_screen manage_gig_screen} {ui goto_screen qp_diff_screen}}) ;go to titty screen if a song has been played this session, if not go to part select
            (quickplay {gamecfg set_track 0 1} {ui goto_screen qp_diff_screen})
            (multi_vs
               {gamecfg set_track 0 1}
               {gamecfg set_track 1 1}
            )
            (multi_fo
               {gamecfg set_track 0 1}
               {gamecfg set_track 1 1}
            )
            (practice {gamecfg set_track 0 1} {if_else $diffseen {ui goto_screen manage_gig_screen} {ui goto_screen practice_diff_screen}}) ;go to titty screen if a song has been played this session, if not go to difficulty
         }
      }
      {if {== $component part2.btn}
      {gamecfg set_track 0 2} {set $roygb TRUE} ;if part 2 button is selected, set player 0 to the third instrument in the song definition. also set roygb colors to true since this is drums
      }
      {switch {gamecfg get mode} ;switch action based on result of which game mode is currently being used
          (career {if_else $diffseen {ui goto_screen manage_gig_screen} {ui goto_screen qp_diff_screen}}) ;go to titty screen if a song has been played this session, if not go to part select
          (practice {if_else $diffseen {ui goto_screen manage_gig_screen} {ui goto_screen practice_diff_screen}}) ;if practice, go to the select section screen
          (multi_fo
             {ui goto_screen multi_fo_seldiff_screen}
          )
          (multi_vs
             {ui goto_screen multi_vs_seldiff_screen}
          )
      }
   )
}
{new GHScreen qp_selpart_screen
   (panels meta qp_selpart_panel selpart_overlay_panel helpbar) ;what panels are included in this screen, in reverse draw order (help bar is always on top)
   (focus qp_selpart_panel) ;which panel to set focus to
   (helpbar ;setup helpbar
      (default ((fret1 help_continue) (fret2 help_back) (strum help_updown)) ;we need continue, go back, and up down for this screen
      )
   )
}