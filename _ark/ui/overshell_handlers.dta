#include overshell_slider_handlers.dta ;the slider handlers are a lot of script so keep it out of here
#define OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
(
   (BUTTON_DOWN_MSG ;ran when any button is pressed. in this macro we only care about triangle (back)
      {if
         {&& {! {$this slider_selected}} {== $button kPad_Tri}} ;if triangle is pressed, but not when exiting a slider
            {ui pop_screen} ;exit the current overshell screen
      }
      kDataUnhandled ;means literally nothing. we need to tell the game to not worry if we press a button not defined in BUTTON_DOWN_MSG
   )
)
#define OVERSHELL_HELP_POP_HANDLER ;common script ran when exiting an overshell screen
(
   {if_else {&& {! {$this slider_selected}} $helpentered}
      {do
         {$this reset} ;reset the panel so we see our new options reflected
         {ui pop_screen} ;exit the current overshell screen
      }
      {do
         {$this reset} ;reset the panel so we see our new options reflected
         {ui push_screen overshell_help_screen} ;push the help screen if we haven't seen it this boot cycle
      }
   }
)
#define CHEAT_POP ;macro for the cheat sound effect used in lists all throughout overshell. meant to be used inside an if_else
(
   {play_sfx cheat} ;if modifier is set to true
   {play_sfx cheat_off} ;if modifier is set to false
)
{new
   SliderPanel ;panel type
   overshell_speed_slider ;panel name
   (file overshell_slider.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   SPEED_SLIDER_HANDLERS ;found in overshell_slider_handlers.dta
}
{new
   GHScreen ;screen type
   overshell_speed_slider_screen ;screen name
   (panels overshell_speed_slider) ;panels used for this screen. overshell only uses one panel
   (focus overshell_speed_slider) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   SliderPanel ;panel type
   overshell_lag_slider ;panel name
   (file overshell_slider.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   LAG_SLIDER_HANDLERS ;found in overshell_slider_handlers.dta
}
{new
   GHScreen ;screen type
   overshell_lag_screen ;screen name
   (panels overshell_lag_slider) ;panels used for this screen. overshell only uses one panel
   (focus overshell_lag_slider) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   SliderPanel ;panel type
   overshell_audio_slider ;panel name
   (file overshell_slider.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   OVERSHELL_AUDIO_SLIDER_HANDLERS
}
{new
   GHScreen ;screen type
   overshell_audio_slider_screen ;screen name
   (panels overshell_audio_slider) ;panels used for this screen. overshell only uses one panel
   (focus overshell_audio_slider) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   SliderPanel ;panel type
   track_overshell_slider ;panel name
   (file overshell_slider.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   TRACK_SLIDER_HANDLERS ;found in overshell_slider_handlers.dta
}
{new
   GHScreen ;screen type
   overshell_track_slider_screen ;screen name
   (panels track_overshell_slider) ;panels used for this screen. overshell only uses one panel
   (focus track_overshell_slider) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   SliderPanel ;panel type
   overshell_color_slider ;panel name
   (file overshell_slider.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   COLOR_SLIDER_HANDLERS ;found in overshell_slider_handlers.dta
}
{new
   GHScreen ;screen type
   overshell_color_slider_screen ;screen name
   (panels overshell_color_slider) ;panels used for this screen. overshell only uses one panel
   (focus overshell_color_slider) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_track_element_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set circular 1} ;set the list to wrap around when the end is reached
      {gs_title.lbl set_localized_text {localize os_trackelm}} ;set the title text for this screen
      {sel_section.lst set_data ;set up the data for the list
         (
            elm_name elm_mtv elm_starpower elm_streaklabel elm_streakstandardlabel
            elm_starcounter elm_cloneherostarcounter elm_songprogress elm_starprogress
            elm_scorenum elm_cloneheroscorenum elm_scorenumframe elm_gemcolor ;elm_popup
            elm_smashercolor elm_trackrailcolor elm_beatlinecolor
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (elm_name {set $colormenu name}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_starpower {set $colormenu starpower}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_streaklabel {set $colormenu streaklabel}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_streakstandardlabel {set $colormenu streakstandardlabel}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_starcounter {set $colormenu starcounter}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_cloneherostarcounter {set $colormenu cloneherostarcounter}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_songprogress {set $colormenu songprogress}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_starprogress {set $colormenu starprogress}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_mtv {set $colormenu mtv}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_popup {set $colormenu notepopup}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_cloneheroscorenum {set $colormenu cloneheroscorenum}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_scorenum {set $colormenu scorenum}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_scorenumframe {set $colormenu scorenumframe}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_gemcolor {set $colormenu gemcolor}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_smashercolor {set $colormenu smashercolor}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_trackrailcolor {set $colormenu trackrailcolor}) ;set up a temp var for which color we will be changing in the overshell_color_slider
         (elm_beatlinecolor {set $colormenu beatlinecolor}) ;set up a temp var for which color we will be changing in the overshell_color_slider
      }
      {overshell_color_slider set_colors} ;runs the title label color code for previewing the current color
      {ui pop_screen} ;exit the current overshell screen
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_track_element_list_screen ;screen name
   (panels overshell_track_element_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_track_element_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
#define OVERSHELL_LIST_RESET_HANDLER ;sets up our function to reset the current overshell screen with new parameters, and pop up the help screen if needed
(
   {set $trackmodifierlistpos {sel_section.lst selected_pos}} ;saves the currently selected list position to temp var
      {if_else {&& {! {$this slider_selected}} $helpentered} ;check if we are not in a slider and that the help screen has already been entered
         {do
            {sel_section.lst set_selected $trackmodifierlistpos} ;set the current position of the list back to the temp var
            {$this reset} ;reset the panel so we see our new options reflected
         }
         {ui push_screen overshell_help_screen} ;push the help screen if we haven't seen it this boot cycle
      }
)
{new
   GHPanel ;panel type
   overshell_appearance_list ;panel name
   (file overshell_theme.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus resume.btn) ;focus on resume button, since we dont use all of the btns
   (reset_focus TRUE) ;make sure to bring the focus to the overshell theme panel
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {pause_title.lbl set_localized_text {localize os_appearance}} ;set the title text for this screen
      {pause_title.lbl set_local_pos 0 0 105} ;move the label to the proper location
      {pause_buttons.view set_local_pos 0 125 50} ;move the buttons to the proper location
      {diff.btn set_showing FALSE} ;hide the extra unused button
      {extra2.btn set_showing FALSE} ;hide the extra unused button
      {$this disable diff.btn} ;disable the extra unused button
      {$this disable extra2.btn} ;disable the extra unused button
      {resume.btn set_localized_text {localize os_trkmod}} ;set the title text for this screen
      {restart.btn set_localized_text {localize os_selhw}} ;set the title text for this screen
      {change_speed.btn set_localized_text {localize os_font}} ;set the title text for this screen
      {section.btn set_localized_text {localize os_themeselect}} ;set the title text for this screen
      {newsong.btn set_localized_text {localize os_songlistthemes}} ;set the title text for this screen
      {quit.btn set_localized_text {localize os_colorselector}} ;set the title text for this screen
      {$this disable extra1.btn} ;hide unused btn
      {extra1.btn set_showing FALSE}
   )
}
{new
   GHScreen ;screen type
   overshell_appearance_screen ;screen name
   (panels overshell_appearance_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_appearance_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens 
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch $component ;run specific code based on exactly which item is selected
         (resume.btn ;track options
            {ui push_screen overshell_track_list_screen} ;we open another screen for another list
         )
         (restart.btn ;highway select
            {ui push_screen overshell_highway_list_screen} ;we open another screen for another list
         )
         (change_speed.btn ;name font
            {ui push_screen overshell_font_list_screen} ;we open another screen for another list
         )
         (section.btn ;menu themes
            {ui push_screen overshell_theme_list_screen} ;we open another screen for another list
         )
         (newsong.btn ;song list themes
            {ui push_screen overshell_song_theme_screen} ;we open another screen for another list
         )
         (quit.btn ;color selector
            {ui push_screen overshell_color_slider_screen}
         )
      }
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHPanel ;panel type
   overshell_managegig_list ;panel name
   (file overshell_theme.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus resume.btn) ;focus on resume button, since we dont use all of the btns
   (reset_focus TRUE) ;make sure to bring the focus to the overshell theme panel
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {pause_title.lbl set_localized_text {localize os_background}} ;set the title text for this screen
      {pause_title.lbl set_local_pos 0 0 105} ;move the label to the proper location
      {pause_buttons.view set_local_pos 0 125 50} ;move the buttons to the proper location
      {diff.btn set_showing FALSE} ;hide the extra unused button
      {extra2.btn set_showing FALSE} ;hide the extra unused button
      {$this disable diff.btn} ;disable the extra unused button
      {$this disable extra2.btn} ;disable the extra unused button
      {resume.btn set_localized_text {localize os_venues}} ;set the title text for this screen
      {restart.btn set_localized_text {localize os_characters}} ;set the title text for this screen
      {change_speed.btn set_localized_text {localize os_guitars}} ;set the title text for this screen
      {$this disable section.btn} ;hide unused btn
      {section.btn set_showing FALSE}
      {$this disable newsong.btn} ;hide unused btn
      {newsong.btn set_showing FALSE}
      {$this disable quit.btn} ;hide unused btn
      {quit.btn set_showing FALSE}
      {$this disable extra1.btn} ;hide unused btn
      {extra1.btn set_showing FALSE}
   )
}
{new
   GHScreen ;screen type
   overshell_managegig_screen ;screen name
   (panels overshell_managegig_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_managegig_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens 
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch $component ;run specific code based on exactly which item is selected
         (resume.btn ;venue select
            {ui push_screen overshell_venue_list_screen} ;we open another screen for another list
         )
         (restart.btn ;character select
            {ui push_screen overshell_character_list_screen} ;we open another screen for another list
         )
         (change_speed.btn ;guitar select
            {ui push_screen overshell_guitar_list_screen} ;we open another screen for another list
         )
      }
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHPanel ;panel type
   overshell_options_list ;panel name
   (file overshell_theme.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus resume.btn) ;focus on resume button, since we dont use all of the btns
   (reset_focus TRUE) ;make sure to bring the focus to the overshell theme panel
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {pause_title.lbl set_localized_text {localize os_options}} ;set the title text for this screen
      {pause_title.lbl set_local_pos 0 0 105} ;move the label to the proper location
      {pause_buttons.view set_local_pos 0 125 50} ;move the buttons to the proper location
      {diff.btn set_showing FALSE} ;hide the extra unused button
      {extra2.btn set_showing FALSE} ;hide the extra unused button
      {$this disable diff.btn} ;disable the extra unused button
      {$this disable extra2.btn} ;disable the extra unused button
      {resume.btn set_localized_text {localize os_username}} ;set the title text for this screen
      {restart.btn set_localized_text {localize os_audiooptions}} ;set the title text for this screen
      {change_speed.btn set_localized_text {localize os_calibration}} ;set the title text for this screen
      {section.btn set_localized_text {localize os_handedness}} ;set the title text for this screen
      {newsong.btn set_localized_text {localize os_credits}} ;set the title text for this screen
      {$this disable quit.btn} ;hide unused btn
      {quit.btn set_showing FALSE}
   ;   {quit.btn set_localized_text {localize os_goldtheme}} ;set the title text for this screen
      {$this disable extra1.btn} ;hide unused btn
      {extra1.btn set_showing FALSE}
   ;   {extra1.btn set_localized_text {localize os_songlistthemeslbl}} ;set the title text for this screen
   )
}
{new
   GHScreen ;screen type
   overshell_options_screen ;screen name
   (panels overshell_options_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_options_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens 
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch $component ;run specific code based on exactly which item is selected
         (resume.btn ;username
            {ui pop_screen}
            {ui pop_screen}
            {ui goto_screen manage_band_screen} ;we open another screen for another list
         )
         (restart.btn ;audio options
            {ui push_screen overshell_audio_slider_screen} ;we open another screen for another list
         )
         (change_speed.btn ;calibration
            {ui push_screen overshell_lag_screen} ;we open another screen for another list
         )
         (section.btn ;handedness
            {ui push_screen overshell_handedness_screen} ;we open another screen for another list
         )
         (newsong.btn ;credits
            {ui pop_screen}
            {ui pop_screen}
            {ui goto_screen credits_screen} ;we open another screen for another list
         )
      ;   (quit.btn ;gold menu theme
      ;      {set $menutheme gold}
      ;      OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
      ;   )
      ;   (extra1.btn ;song select theme button
      ;      {ui push_screen overshell_song_theme_screen} ;push the song select theme screen
      ;   )
      }
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_track_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set alignment kTopCenter} ;ensure the list is aligned properly
      {gs_title.lbl set_localized_text {localize os_trackmodifiers}} ;set the title text for this screen
      {sel_section.lst set_data ;set up the data for the list
         (
            os_cloneherohud os_brighthopos os_darkstrums
            os_gh1track os_gh3track os_voidfrets os_eyeballgems
            os_poorspytex
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (os_voidfrets
            {set $voidfrets {! $voidfrets}} ;set the variable to the opposite of what it currently is
            {if_else $voidfrets ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
         (os_eyeballgems
            {if_else $eyeballgems
               {do
                  {play_sfx cheat_off} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $eyeballgems FALSE}
               }
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $brighthopos FALSE} ;eyeball gems turn off all other gem types
                  {set $gh1track FALSE} ;eyeball gems turn off all other gem types
                  {set $darkstrums FALSE} ;eyeball gems turn off all other gem types
                  {set $eyeballgems TRUE}
               }
            }
         )
         (os_cloneherohud
            {if_else $clonehero_hud
               {do
                  {play_sfx cheat_off} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $clonehero_hud FALSE}
                  {set $trackcamx 1.0} ;restore the track width to the default width
               }
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $clonehero_hud TRUE}
                  {set $trackcamx 1.3} ;I have only specifically set up one track width at this time
                  {set $sppop FALSE} ;in clone hero hud, the animation for star power fucks up the visuals
               }
            }
         )
         (os_brighthopos
            {set $brighthopos {! $brighthopos}} ;set the variable to the opposite of what it currently is
            {if_else $brighthopos ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
         (os_darkstrums
            {set $darkstrums {! $darkstrums}} ;set the variable to the opposite of what it currently is
            {if_else $darkstrums ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
         (os_gh1track
            {if_else $gh1track
               {do
                  {play_sfx cheat_off} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $gh1track FALSE}
               }
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $gh3track FALSE} ;gh1 track turns off gh3 track
                  {set $gh1track TRUE}
               }
            }
         )
         (os_gh3track
            {if_else $gh3track
               {do
                  {play_sfx cheat_off} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $gh3track FALSE}
               }
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $gh1track FALSE} ;gh3 track turns off gh1 track
                  {set $gh3track TRUE}
               }
            }
         )
         (os_poorspytex
            {if_else {== $poorspybuttontype gh2}
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $poorspybuttontype scorespy}
               }
               {if_else {== $poorspybuttontype scorespy}
                  {do
                     {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                     {set $poorspybuttontype xplorer} ;gh3 track turns off gh1 track
                  }
                  {do
                     {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                     {set $poorspybuttontype gh2} ;gh3 track turns off gh1 track
                  }
               }
            }
         )
      }
      OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_track_list_screen ;screen name
   (panels overshell_track_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_track_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
#define OVERSHELL_LIST_RESET_HANDLER ;sets up our function to reset the current overshell screen with new parameters, and pop up the help screen if needed
(
   {set $modifierlistpos {sel_section.lst selected_pos}} ;saves the currently selected list position to temp var
   {if_else {&& {! {$this slider_selected}} $helpentered} ;check if we are not in a slider and that the help screen has already been entered
      {do
         {sel_section.lst set_selected $modifierlistpos} ;set the current position of the list back to the temp var
         {$this reset} ;reset the panel so we see our new options reflected
      }
      {ui push_screen overshell_help_screen} ;push the help screen if we haven't seen it this boot cycle
   }
)
{new
   MultiSelectListPanel ;panel type
   overshell_modifier_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {sel_section.lst set_selected $modifierlistpos} ;select our saved list position
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set circular 1} ;set the list to wrap around when the end is reached
      {sel_section.lst set alignment kTopCenter} ;ensure the list is aligned properly
      {gs_title.lbl set_localized_text {localize os_modifiers}} ;set the title text for this screen
      {sel_section.lst set_data ;set up the data for the list
         (
            os_focusmode os_precision os_skipintro os_skipoutro ;all available modifiers
            os_forceencore os_sfx
            os_whammyfx os_muting os_nofail os_noflames
            os_songtitle os_nametitle os_cleanmtv
            os_brutalmode os_towel os_quarterbeatlines
            os_divisionlines
            os_notestreakmod os_sppop os_highwayshake
            os_selecttorestart os_monkeyhead ;os_drums
            os_eyeballhead os_flaminghead os_neckless
            os_performance os_autoplay os_roxbury
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (os_precision
            {set $precision {! $precision}} ;set the variable to the opposite of what it currently is
            {if_else $precision ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_sfx
            {set $sfx {! $sfx}} ;set the variable to the opposite of what it currently is
            {if_else $sfx ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_sppop
            {set $sppop {! $sppop}} ;set the variable to the opposite of what it currently is
            {if_else $sppop ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_whammyfx
            {set $whammyfx {! $whammyfx}} ;set the variable to the opposite of what it currently is
            {if_else $whammyfx ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_muting
            {set $muting {! $muting}} ;set the variable to the opposite of what it currently is
            {if_else $muting ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_autoplay
            {set $autoplay {! $autoplay}} ;set the variable to the opposite of what it currently is
            {set $gotcha TRUE} ;sanity check if the user enabled autoplay at all this session
            {if_else $autoplay ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_notestreakmod
            {set $notestreakmod {! $notestreakmod}} ;set the variable to the opposite of what it currently is
            {if_else $notestreakmod ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_selecttorestart
            {set $selecttorestart {! $selecttorestart}} ;set the variable to the opposite of what it currently is
            {if_else $selecttorestart ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_towel
            {set $towel {! $towel}} ;set the variable to the opposite of what it currently is
            {if_else $towel ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_quarterbeatlines
            {set $removequarterbeatlines {! $removequarterbeatlines}} ;set the variable to the opposite of what it currently is
            {if_else $removequarterbeatlines ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_divisionlines
            {set $removedivisionlines {! $removedivisionlines}} ;set the variable to the opposite of what it currently is
            {if_else $removedivisionlines ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_skipintro
            {set $miloskipintro {! $miloskipintro}} ;set the variable to the opposite of what it currently is
            {if_else $miloskipintro ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_forceencore
            {set $forceencore {! $forceencore}} ;set the variable to the opposite of what it currently is
            {if_else $forceencore ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_focusmode
            {if_else $focusmode ;check the state of focus mode
               {do
                  {play_sfx cheat_off} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $focusmode FALSE} ;turn off focus mode
                  {set $miloskipintro FALSE} ;restore the song intro
                  {set $skipoutro FALSE} ;restore the song outro
                  {set $notestreakmod TRUE} ;turn back on note streak popups
                  {set $sfx TRUE} ;turn back on sfc
               }
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $focusmode TRUE} ;turn on focus mode
                  {set $miloskipintro TRUE} ;turn off song intro
                  {set $skipoutro TRUE} ;turn off song outro
                  {set $notestreakmod FALSE} ;turn off note streak popups
                  {set $sfx FALSE} ;turn off sfx
               }
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_skipoutro
            {set $skipoutro {! $skipoutro}} ;set the variable to the opposite of what it currently is
            {if_else $skipoutro ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_noflames
            {set $noflames {! $noflames}} ;set the variable to the opposite of what it currently is
            {if_else $noflames ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_nofail
            {set $nofail {! $nofail}} ;set the variable to the opposite of what it currently is
            {if_else $nofail ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_cleanmtv
            {set $cleanmtv {! $cleanmtv}} ;set the variable to the opposite of what it currently is
            {if_else $cleanmtv ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_brutalmode
            {set $brutalmode {! $brutalmode}} ;set the variable to the opposite of what it currently is
            {if_else $brutalmode ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_songtitle
            {set $songtitle {! $songtitle}} ;set the variable to the opposite of what it currently is
            {if_else $songtitle ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_nametitle
            {set $nametitle {! $nametitle}} ;set the variable to the opposite of what it currently is
            {if_else $nametitle ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_highwayshake
            {set $highwayshake {! $highwayshake}} ;set the variable to the opposite of what it currently is
            {if_else $highwayshake ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
;         (os_drums
;            {set $drumenabled {! $drumenabled}} ;set the variable to the opposite of what it currently is
;            {if_else $drumenabled ;check the state of the variable
;               CHEAT_POP ;shortcut for the if else options on which sound effect to play
;            }
;            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
;         )
         (os_horsehead ;only available on ps2
            {set $cheat_enabled_horse_head_mode {! $cheat_enabled_horse_head_mode}} ;set the variable to the opposite of what it currently is
            {if_else $cheat_enabled_horse_head_mode ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_monkeyhead
            {if_else
               {|| ;or
                  {== $cheat_crowd_heads 0} ;check crowd head modifier state
                  {== $cheat_crowd_heads eyeball_crowd_heads} ;check crowd head modifier state
               }
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $cheat_crowd_heads monkey_crowd_heads} ;set crowd heads to monkey heads
               }
               {do
                  {play_sfx cheat_off} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $cheat_crowd_heads 0} ;turn off crowd heads
               }
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_eyeballhead
            {if_else
               {|| ;or
                  {== $cheat_crowd_heads 0} ;check crowd head modifier state
                  {== $cheat_crowd_heads monkey_crowd_heads} ;check crowd head modifier state
               }
               {do
                  {play_sfx cheat} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $cheat_crowd_heads eyeball_crowd_heads} ;set crowd heads to eyeball heads
               }
               {do
                  {play_sfx cheat_off} ;since we aren't setup very well to use the macro, call the sfx directly
                  {set $cheat_crowd_heads 0} ;turn off crowd heads
               }
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_flaminghead
            {set $cheat_enabled_flaming_head {! $cheat_enabled_flaming_head}} ;set the variable to the opposite of what it currently is
            {if_else $cheat_enabled_flaming_head ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_neckless
            {set $neckless {! $neckless}} ;set the variable to the opposite of what it currently is
            {if_else $neckless ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_performance
            {set $cheat_enabled_performance_mode {! $cheat_enabled_performance_mode}} ;set the variable to the opposite of what it currently is
            {if_else $cheat_enabled_performance_mode ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
         (os_roxbury
            {set $barf_cheat {! $barf_cheat}} ;set the variable to the opposite of what it currently is
            {if_else $barf_cheat ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            OVERSHELL_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
         )
      }
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_modifier_list_screen ;screen name
   (panels overshell_modifier_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_modifier_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
#define OVERSHELL_DIFF_RESET_HANDLER ;sets up our function to reset the current overshell screen with new parameters, and pop up the help screen if needed
(
   {set $difflistpos {sel_section.lst selected_pos}} ;saves the currently selected list position to temp var
   {if_else {&& {! {$this slider_selected}} $helpentered} ;check if we are not in a slider and that the help screen has already been entered
      {do
         {sel_section.lst set_selected $difflistpos} ;set the current position of the list back to the temp var
         {$this reset} ;reset the panel so we see our new options reflected
      }
      {ui push_screen overshell_help_screen} ;push the help screen if we haven't seen it this boot cycle
   }
)
{new
   MultiSelectListPanel ;panel type
   overshell_diff_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {gs_title.lbl set_localized_text {localize os_diff}} ;set the title text for this screen
      {sel_section.lst set_selected $difflistpos} ;select our saved list position
      {sel_section.lst set circular 0} ;we dont set this list to be circular because there are not enough list items to wrap
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set_data ;set up the data for the list
         (
            easy medium hard expert os_leftyp1 os_leftyp2 ;we combine difficulty and lefty flip in the same spot because they would otherwise be very bare menus
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (easy
            {{game get_player_config 0} set_difficulty kDifficultyEasy} ;we only set player 1 diff. player 2 diff is selected through ui
         )
         (medium
            {{game get_player_config 0} set_difficulty kDifficultyMedium} ;we only set player 1 diff. player 2 diff is selected through ui
         )
         (hard
            {{game get_player_config 0} set_difficulty kDifficultyHard} ;we only set player 1 diff. player 2 diff is selected through ui
         )
         (expert
            {{game get_player_config 0} set_difficulty kDifficultyExpert} ;we only set player 1 diff. player 2 diff is selected through ui
         )
         (os_leftyp1
            {set $leftyp1 {! $leftyp1}} ;set var to opposite value
            {options set_lefty 0 $leftyp1} ;set lefty flip for player 1
            {if_else $leftyp1
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
         (os_leftyp2
            {set $leftyp2 {! $leftyp2}} ;set var to opposite value
            {options set_lefty 1 $leftyp2} ;set lefty flip for player 2
            {if_else $leftyp2
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
      }
      OVERSHELL_DIFF_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_diff_list_screen ;screen name
   (panels overshell_diff_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_diff_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_handedness_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {gs_title.lbl set_localized_text {localize os_handedness}} ;set the title text for this screen
      {sel_section.lst set_selected $handlistpos} ;select our saved list position
      {sel_section.lst set circular 0} ;we dont set this list to be circular because there are not enough list items to wrap
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set_data ;set up the data for the list
         (
            os_leftyp1 os_leftyp2
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (os_leftyp1
            {set $leftyp1 {! $leftyp1}} ;set var to opposite value
            {options set_lefty 0 $leftyp1} ;set lefty flip for player 1
            {if_else $leftyp1
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
         (os_leftyp2
            {set $leftyp2 {! $leftyp2}} ;set var to opposite value
            {options set_lefty 1 $leftyp2} ;set lefty flip for player 2
            {if_else $leftyp2
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
      }
      OVERSHELL_DIFF_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_handedness_screen ;screen name
   (panels overshell_handedness_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_handedness_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_character_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (update_char_pic ;ran from thread_task in this panel
      {set $uipicturenumber {+ $uipicturenumber 1}} ;increase the image number for display
      {if {> $uipicturenumber 3} ;check if we reached the end of our available images
         {set $uipicturenumber 0} ;reset displayed image back to the first one
      }
      {gs_pic.tex set_bitmap {sprint #ifdef HX_XBOX "ui/image/ng/photo_" #else "ui/image/og/photo_" #endif $charactermenu $uipicturenumber "_keep.bmp"}} ;set the new image for display
   )
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set circular 1} ;set the list to wrap around when the end is reached
      {gs_title.lbl set_localized_text {localize os_characterselect}} ;set the title label for the current screen
      {gs_background.view add_object gs_tile5.mesh} ;make sure we have the spare mesh loaded
      {gs_tile5.mesh set_local_pos 125 100 100} ;position spare image
      {gs_tile5.mesh set_local_scale_index 0 .9} ;scale spare image
      {gs_tile5.mesh set_local_scale_index 2 .5} ;scale spare image
      {gs_tile5.mat set diffuse_tex gs_pic.tex} ;set up the material
      {set $uipicturenumber 0} ;set default image number
      {set $charactermenu random} ;set default pic (we enter to random)
      {gs_pic.tex set_bitmap {sprint #ifdef HX_XBOX "ui/image/ng/photo_" #else "ui/image/og/photo_" #endif $charactermenu $uipicturenumber "_keep.bmp"}} ;set the spare texture to the default pic
      {if {exists char_pic_task} ;check if the below task is running
         {delete char_pic_task} ;delete the task if already running
      }
      {thread_task ;run a new task
         (units kTaskUISeconds) ;we are in ui so use ui seconds
         (name char_pic_task) ;name the task for pruning later
         (script
            {$this update_char_pic} ;run update_char_pic block
            {$task sleep 1.3} ;wait
            {$task loop} ;loop task
         )
      }
      {sel_section.lst set_data ;set up the data for the list
         (
            random punk1 punk2 alterna1 ;list of all available characters
            alterna2 glam1 glam2 goth2
            goth1 metal1 metal2 rockabill1
            rockabill2 rock2 rock1 deathmetal1
            deathmetal2 classic funk1 grim
         )
      }
   )
   (exit
      {if {exists char_pic_task} ;check if the above task is running
         {delete char_pic_task} ;delete the task if running
      }
   )
   (SCROLL_MSG ;ran when ui elements are scrolled through
      {set $uipicturenumber {+ $uipicturenumber 1}} ;increase the image number for display
      {if {> $uipicturenumber 3} ;check if we reached the end of our available images
         {set $uipicturenumber 0} ;reset displayed image back to the first one
      }
      {set $charactermenu {$component selected_sym}} ;set the temp var for the current list pos
      {gs_pic.tex set_bitmap {sprint #ifdef HX_XBOX "ui/image/ng/photo_" #else "ui/image/og/photo_" #endif $charactermenu $uipicturenumber "_keep.bmp"}} ;apply the current highlighted character preview image
      {$this update} ;update the panel
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {set $forcecharacter TRUE} ;when set to true, stops the random selection performed on the song select screen
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (random {set $forcecharacter FALSE}) ;when set to false, resumes the random selection performed on the song select screen
         (punk1 {game set_character punk1 TRUE})
         (punk2 {game set_character punk2 TRUE})
         (alterna1 {game set_character alterna1 TRUE})
         (alterna2 {game set_character alterna2 TRUE})
         (glam1 {game set_character glam1 TRUE})
         (glam2 {game set_character glam2 TRUE})
         (goth2 {game set_character goth2 TRUE})
         (goth1 {game set_character goth1 TRUE})
         (metal1 {game set_character metal1 TRUE})
         (metal2 {game set_character metal2 TRUE})
         (rockabill1 {game set_character rockabill1 TRUE})
         (rockabill2 {game set_character rockabill2 TRUE})
         (rock2 {game set_character rock2 TRUE})
         (rock1 {game set_character rock1 TRUE})
         (deathmetal1 {game set_character deathmetal1 TRUE})
         (deathmetal2 {game set_character deathmetal2 TRUE})
         (classic {game set_character classic TRUE})
         (funk1 {game set_character funk1 TRUE})
         (grim {game set_character grim TRUE})
      }
      OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_character_list_screen ;screen name
   (panels overshell_character_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_character_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_venue_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {gs_title.lbl set_localized_text {localize os_venueselect}} ;set the title text for this screen
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper locatio
      {sel_section.lst set circular 1} ;set the list to wrap around when the end is reached
      {sel_section.lst set_data ;set up the data for the list
         (
            random battle small1 small2 big theatre fest arena stone ;list of all available venues
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {set $forcevenue TRUE} ;when set to true, stops the random selection performed on the song select screen
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (random {set $forcevenue FALSE}) ;when set to false, resumes the random selection performed on the song select screen
         (battle {game set_venue battle TRUE})
         (small1 {game set_venue small1 TRUE})
         (small2 {game set_venue small2 TRUE})
         (big {game set_venue big TRUE})
         (theatre {game set_venue theatre TRUE})
         (fest {game set_venue fest TRUE})
         (arena {game set_venue arena TRUE})
         (stone {game set_venue stone TRUE})
      }
      OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_venue_list_screen ;screen name
   (panels overshell_venue_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_venue_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_guitar_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set circular 1} ;set the list to wrap around when the end is reached
      {gs_title.lbl set_localized_text {localize os_guitarselect}} ;set the title text for this screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {sel_section.lst set_data ;set up the data for the list
         (
             random lespaul lp_cayenne lp_goddessburst lp_zakk ;list of all available guitars
             sg sg_white sg_gt sg_flames
             flying_v fv_v2 fv_century fv_red
             explorer exp_nat exp_sun exp_white exp_swirl
             lespaul_doublecut lp_dbl_resin
             firebird fb_blue fb_ebony fb_leopard
             epiphone_coronet coronet_cherry coronet_burst coronet_green
             kramer_vanguard van_yellow
             moderne mod_cherry
             corvus cor_nat
             es335 es_cherry
             kramer_650 650_white
             eds eds_white
             lespaul_doublecut_sticker lespaul_sonex lespaul_marauder
             epiphone_casino epiphone_sheraton chet_atkins fish_reward usa_reward
             coffin_reward viking_reward snaketapus_reward eyeball_reward
             battleaxe_reward log_reward scythe #ifndef HX_XBOX guitar_red_octane #endif
             bass_musicman bass_musicman_lava bass_sg_mahogany bass_sg_cream bass_grabber_cherry
             bass_grabber_maple bass_thunderbird_ebony bass_thunderbird_burst bass_hofner
          )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {set $forceguitar TRUE} ;when set to true, stops the random selection performed on the song select screen
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (random {set $forceguitar FALSE}) ;when set to false, resumes the random selection performed on the song select screen
         (lespaul {game set_guitar lespaul lp_cherry})
         (lp_cherry {game set_guitar lespaul lp_cherry})
         (lp_cayenne {game set_guitar lespaul lp_cayenne})
         (lp_goddessburst {game set_guitar lespaul lp_goddessburst})
         (lp_zakk {game set_guitar lespaul lp_zakk})
         (sg {game set_guitar sg sg_cherry})
         (sg_cherry {game set_guitar sg sg_cherry})
         (sg_white {game set_guitar sg sg_white})
         (sg_gt {game set_guitar sg sg_gt})
         (sg_flames {game set_guitar sg sg_flames})
         (flying_v {game set_guitar flying_v fv_white})
         (fv_white {game set_guitar flying_v fv_white})
         (fv_v2 {game set_guitar flying_v fv_v2})
         (fv_century {game set_guitar flying_v fv_century})
         (fv_red {game set_guitar flying_v fv_red})
         (explorer {game set_guitar explorer exp_ebony})
         (exp_ebony {game set_guitar explorer exp_ebony})
         (exp_nat {game set_guitar explorer exp_nat})
         (exp_sun {game set_guitar explorer exp_sun})
         (exp_white {game set_guitar explorer exp_white})
         (exp_swirl {game set_guitar explorer exp_swirl})
         (lespaul_doublecut {game set_guitar lespaul_doublecut lp_dbl_white})
         (lp_dbl_yellow {game set_guitar lespaul_doublecut lp_dbl_yellow})
         (lp_dbl_resin {game set_guitar lespaul_doublecut lp_dbl_resin})
         (firebird {game set_guitar firebird fb_burst})
         (fb_burst {game set_guitar firebird fb_burst})
         (fb_blue {game set_guitar firebird fb_blue})
         (fb_ebony {game set_guitar firebird fb_ebony})
         (fb_leopard {game set_guitar firebird fb_leopard})
         (epiphone_coronet {game set_guitar epiphone_coronet coronet_brown})
         (coronet_brown {game set_guitar epiphone_coronet coronet_brown})
         (coronet_cherry {game set_guitar epiphone_coronet coronet_cherry})
         (coronet_burst {game set_guitar epiphone_coronet coronet_burst})
         (coronet_green {game set_guitar epiphone_coronet coronet_green})
         (kramer_vanguard {game set_guitar kramer_vanguard van_black})
         (van_black {game set_guitar kramer_vanguard van_black})
         (van_yellow {game set_guitar kramer_vanguard van_yellow})
         (moderne {game set_guitar moderne mod_nat})
         (mod_nat {game set_guitar moderne mod_nat})
         (mod_cherry {game set_guitar moderne mod_cherry})
         (corvus {game set_guitar corvus cor_yellow})
         (cor_yellow {game set_guitar corvus cor_yellow})
         (cor_nat {game set_guitar corvus cor_nat})
         (es335 {game set_guitar es335 es_maple})
         (es_maple {game set_guitar es335 es_maple})
         (es_cherry {game set_guitar es335 es_cherry})
         (kramer_650 {game set_guitar kramer_650 650_stripe})
         (650_stripe {game set_guitar kramer_650 650_stripe})
         (650_white {game set_guitar kramer_650 650_white})
         (eds {game set_guitar eds eds_cherry})
         (eds_cherry {game set_guitar eds eds_cherry})
         (eds_white {game set_guitar eds eds_white})
         (lespaul_doublecut_sticker {game set_guitar lespaul_doublecut_sticker lp_dbl_sticker})
         (lespaul_sonex {game set_guitar lespaul_sonex lp_sonex})
         (lespaul_marauder {game set_guitar lespaul_marauder lp_marauder})
         (epiphone_casino {game set_guitar epiphone_casino casino})
         (epiphone_sheraton {game set_guitar epiphone_sheraton sheraton})
         (chet_atkins {game set_guitar chet_atkins chet_orange})
         (fish_reward {game set_guitar fish_reward fish})
         (usa_reward {game set_guitar usa_reward usa})
         (coffin_reward {game set_guitar coffin_reward coffin})
         (viking_reward {game set_guitar viking_reward viking})
         (snaketapus_reward {game set_guitar snaketapus_reward snaketapus})
         (eyeball_reward {game set_guitar eyeball_reward eyeball})
         (battleaxe_reward {game set_guitar battleaxe_reward battleaxe})
         (log_reward {game set_guitar log_reward log})
         (scythe {game set_guitar scythe scythe})
         (guitar_red_octane {game set_guitar guitar_red_octane guitar_red_octane})
         (bass_musicman {game set_guitar bass_musicman bass_music_black})
         (bass_musicman_lava {game set_guitar bass_musicman_lava bass_music_lava})
         (bass_sg_mahogany {game set_guitar bass_sg_mahogany bass_sg_mahog})
         (bass_sg_cream {game set_guitar bass_sg_cream bass_sg_cream})
         (bass_grabber_cherry {game set_guitar bass_grabber_cherry bass_grab_cherry})
         (bass_grabber_maple {game set_guitar bass_grabber_maple bass_grab_maple})
         (bass_thunderbird_ebony {game set_guitar bass_thunderbird_ebony bass_tb_ebony})
         (bass_thunderbird_burst {game set_guitar bass_thunderbird_burst bass_tb_burst})
         (bass_hofner {game set_guitar bass_hofner bass_hofner})
      }
      OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_guitar_list_screen ;screen name
   (panels overshell_guitar_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_guitar_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHPanel ;panel type
   overshell_theme_list ;panel name
   (file overshell_theme.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus resume.btn) ;focus on resume button, since we dont use all of the btns
   (reset_focus TRUE) ;make sure to bring the focus to the overshell theme panel
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {pause_title.lbl set_localized_text {localize os_themeselectlbl}} ;set the title text for this screen
      {pause_title.lbl set_local_pos 0 0 105} ;move the label to the proper location
      {pause_buttons.view set_local_pos 0 125 50} ;move the buttons to the proper location
      {diff.btn set_showing FALSE} ;hide the extra unused button
      {extra2.btn set_showing FALSE} ;hide the extra unused button
      {$this disable diff.btn} ;disable the extra unused button
      {$this disable extra2.btn} ;disable the extra unused button
      {resume.btn set_localized_text {localize os_gh1theme}} ;set the title text for this screen
      {restart.btn set_localized_text {localize os_gh2theme}} ;set the title text for this screen
      {change_speed.btn set_localized_text {localize os_gh80stheme}} ;set the title text for this screen
      {section.btn set_localized_text {localize os_gh3theme}} ;set the title text for this screen
      {newsong.btn set_localized_text {localize os_customedtheme}} ;set the title text for this screen
      {quit.btn set_localized_text {localize os_goldtheme}} ;set the title text for this screen
      {$this disable extra1.btn} ;hide unused btn
      {extra1.btn set_showing FALSE}
   ;   {extra1.btn set_localized_text {localize os_songlistthemeslbl}} ;set the title text for this screen
   )
}
{new
   GHScreen ;screen type
   overshell_theme_list_screen ;screen name
   (panels overshell_theme_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_theme_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens 
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch $component ;run specific code based on exactly which item is selected
         (resume.btn ;gh1 menu theme
            {set $menutheme gh1}
            {set $gh1track TRUE}
            {set $gh3song FALSE} ;turn off gh3 song select
            {set $gh3track FALSE} ;turn off gh3 track / notes
            OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
         )
         (restart.btn ;gh2 menu theme
            {set $menutheme gh2}
            {set $gh3song FALSE} ;turn off gh3 song select
            {set $gh1track FALSE} ;turn off gh1 track / notes
            {set $gh3track FALSE} ;turn off gh3 track / notes
            OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
         )
         (change_speed.btn ;gh 80s menu theme
            {set $menutheme 80s}
            {set $gh3song FALSE} ;turn off gh3 song select
            {set $gh1track FALSE} ;turn off gh1 track / notes
            {set $gh3track FALSE} ;turn off gh3 track / notes
            OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
         )
         (section.btn ;gh3 menu theme
            {set $menutheme gh3}
            {set $gh3song TRUE}
            {set $gh3track TRUE}
            OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
         )
         (newsong.btn ;custom edition theme / users theme
            {set $menutheme custom}
            {set $gh3song FALSE} ;turn off gh3 song select
            {set $gh1track FALSE} ;turn off gh1 track / notes
            {set $gh3track FALSE} ;turn off gh3 track / notes
            OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
         )
         (quit.btn ;gold menu theme
            {set $menutheme gold}
            OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
         )
      ;   (extra1.btn ;song select theme button
      ;      {ui push_screen overshell_song_theme_screen} ;push the song select theme screen
      ;   )
      }
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_highway_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_background.view add_object gs_tile5.mesh} ;make sure we have the spare mesh loaded
      {gs_tile5.mesh set_local_pos 125 100 100} ;position spare image
      {gs_tile5.mesh set_local_scale_index 0 .6} ;scale spare image
      {gs_tile5.mesh set_local_scale_index 2 .5} ;scale spare image
      {gs_tile5.mat set diffuse_tex gs_pic.tex} ;set up the material
      {set $highwaymenu _black_highway} ;set default highway for menu, usually _black_highway unless a user removes it for some reason. dont do that.
      {gs_pic.tex set_bitmap {sprint "track/surfaces/" $highwaymenu "_keep.bmp"}} ;set the preview image to the current highlighted highway
      {gs_title.lbl set_localized_text {localize os_sethighway}} ;set the title text for this screen
      {sel_section.lst set circular 1} ;set the list to wrap around when the end is reached
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set_data ;set up the data for the list
         (
            #include ../track/surfaces/highways.dta ;nice trick to provide easy user provided highways. highways.bat in the root of the repo sets up this dta.
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {set $highway {$component selected_sym}} ;set the users desired highway
      OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
   )
   (SCROLL_MSG ;ran when ui elements are scrolled through
      {set $highwaymenu {$component selected_sym}} ;set the temp var for the current list pos
      {gs_pic.tex set_bitmap {sprint "track/surfaces/" $highwaymenu "_keep.bmp"}} ;apply the current highlighted highway preview image
      {$this update} ;update the panel
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_highway_list_screen ;screen name
   (panels overshell_highway_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_highway_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   MultiSelectListPanel ;panel type
   overshell_font_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {set $fontmenu blockletters} ;set the temp var to the first item in the list
      {gs_title.lbl set_type $fontmenu} ;set the title label font to the temp var
      {gs_title.lbl set_localized_text {localize os_setfont}} ;set the title text for this screen
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set circular 1} ;set the list to wrap around when the end is reached
      {sel_section.lst set_data ;set up the data for the list
         (
             blockletters blockletters_fill clarendon cutout ;list of all available fonts
             dyingmarker gh3veticablackcondensed gunsho hand
             helveticablack helveticablackcondensed
             helveticathin impact impactor oldenglish postertype
             receipt rockletters rokk serif tapeworm tapewormscreen
         )
      }
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {set $namefont {$component selected_sym}} ;set the users desired font
      OVERSHELL_HELP_POP_HANDLER ;run help screen macro if havent entered help screen
   )
   (SCROLL_MSG ;ran when ui elements are scrolled through
      {set $fontmenu {$component selected_sym}} ;set the temp var for the current list pos
      {gs_title.lbl set_type $fontmenu} ;apply the current highlighted font to the title label
      {$this update} ;update the panel
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_font_list_screen ;screen name
   (panels overshell_font_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_font_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHPanel ;panel type
   overshell_help_panel ;panel name
   (file overshell_help.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus quit.btn) ;button to focus
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {pause_controller_msg.lbl set_localized_text {localize os_helpmsg}} ;set the title text
      {$this set_focus quit.btn} ;focus one of the buttons for the player
      {set $helpentered TRUE} ;since we entered help once, dont show again
   )
}
{new
   GHScreen ;screen type
   overshell_help_screen ;screen name
   (panels overshell_help_panel) ;panels used for this screen. overshell only uses one panel
   (focus overshell_help_panel) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   (SELECT_START_MSG ;ran when an item on screen is selected
      {ui pop_screen} ;exit the current overshell screen
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
#define SONG_THEME_LIST_RESET_HANDLER ;sets up our function to reset the current overshell screen with new parameters, and pop up the help screen if needed
(
   {set $sngthmlistpos {sel_section.lst selected_pos}} ;saves the currently selected list position to temp var
   {if_else {&& {! {$this slider_selected}} $helpentered} ;check if we are not in a slider and that the help screen has already been entered
      {do
         {sel_section.lst set_selected $sngthmlistpos} ;set the current position of the list back to the temp var
         {$this reset} ;reset the panel so we see our new options reflected
      }
      {ui push_screen overshell_help_screen} ;push the help screen if we haven't seen it this boot cycle
   }
)
{new
   MultiSelectListPanel ;panel type
   overshell_song_theme_list ;panel name
   (file overshell_list.milo) ;milo file used for the panel. found in /ui/gen/
   OVERSHELL_THEME_HANDLER ;make sure the theme coding is loaded into this panel
   (focus sel_section.lst) ;focus the list used in the current overshell screen
   (enter ;when the panel is entered
      {$this overshell_theme} ;run the theme code on the current overshell screen
      {gs_tile5.mesh set_showing FALSE} ;hide the spare mesh we put into the overshell list milo
      {sel_section.lst set_local_pos -140 0 60} ;move the list to the proper location
      {sel_section.lst set_data ;set up the data for the list
         (
            os_altsong os_gh3song os_loopsong ;data for the list
         )
      }
      {gs_title.lbl set_localized_text {localize os_songlistthemeslbl}} ;set the title text for this screen
   )
   (SELECT_START_MSG ;ran when an item on screen is selected
      {switch {$component selected_sym} ;run specific code based on exactly which item is selected
         (os_gh3song
            {set $gh3song {! $gh3song}} ;set the variable to the opposite of what it currently is
            {if_else $gh3song ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            {if $gh3song ;check var state
               {set $altsong FALSE} ;gh3 song select turns off alt song select
            }
         )
         (os_altsong
            {set $altsong {! $altsong}} ;set the variable to the opposite of what it currently is
            {if_else $altsong ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
            {if $altsong ;check var state
               {set $gh3song FALSE} ;alt song select turns off gh3 song select
            }
         )
         (os_loopsong
            {set $loopsong {! $loopsong}} ;set the variable to the opposite of what it currently is
            {if_else $loopsong ;check the state of the variable
               CHEAT_POP ;shortcut for the if else options on which sound effect to play
            }
         )
      }
      SONG_THEME_LIST_RESET_HANDLER ;resets the current overshell screen with new parameters, and pop up the help screen if needed
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}
{new
   GHScreen ;screen type
   overshell_song_theme_screen ;screen name
   (panels overshell_song_theme_list) ;panels used for this screen. overshell only uses one panel
   (focus overshell_song_theme_list) ;panel to focus
   OVERSHELL_SCREEN_COMMON_HANDLER ;common overshell screen setup for all overshell screens
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER ;common script ran in all overshells to handle selections
}